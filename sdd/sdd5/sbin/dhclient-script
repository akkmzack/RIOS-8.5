#!/bin/bash

#
#  URL:       $URL$
#  Revision:  $Revision: 94137 $
#  Date:      $Date: 2011-12-05 15:10:41 -0800 (Mon, 05 Dec 2011) $
#  Author:    $Author: timlee $
# 
#  (C) Copyright 2002-2005 Tall Maple Systems, Inc.  
#  (C) Copyright 2003-2011 Tall Maple Systems, Inc.  
#  All rights reserved.
#

# Based on:
#   netbsd script supplied with dhcp-970306.
#   dhclient-script for Linux. Dan Halbert, March, 1997.
#   Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
#   Ret Hat 9 adaptations (partially or entirely removed).
#
# Notes:
#
# 1. ifconfig down apparently deletes all relevant routes and flushes
# the arp cache, so this doesn't need to be done explicitly.

function mdreq_safe() {
  /opt/tms/bin/mdreq -t 0 -i 0 "$@" 
  if [ $? -ne 0 ]; then
    exit_with_hooks 1
  fi
}

function make_resolv_conf() {
  if [ -n "$new_domain_name" ] || [ -n "$new_domain_name_servers" ]; then
    if [ -n "$new_domain_name" ]; then
        for domain in $new_domain_name; do
            mdreq_safe action /resolver/actions/overlay/add/domain_search \
                ifname string $interface \
                domainname hostname $domain
        done
    fi
    for nameserver in $new_domain_name_servers; do
      mdreq_safe action /resolver/actions/overlay/add/nameserver \
          ifname string $interface \
          address ipv6addr $nameserver
    done
  fi
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
function exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

if [ x$reason = xMEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then
  mdreq_safe action /net/interface/actions/override/set \
      ifname string $interface \
      enabled bool true

  # We need to give the kernel some time to get the interface up.
  sleep 1

  exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
  exit_with_hooks 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then

  if [ -n "$new_host_name" ]; then
      mdreq_safe action /system/actions/override/hostname \
          ifname string $interface \
          hostname hostname $new_host_name
  fi

  if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
    # IP address changed. Bringing down the interface will delete all routes,
    # and clear the ARP cache.
    mdreq_safe action /net/interface/actions/override/set \
        ifname string $interface \
        enabled bool false

  fi
  if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
     [ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

# XXX: do we need to do anything with $new_broadcast_address?
# Can't the broadcast address always be inferred from the subnet mask?

    mdreq_safe action /net/interface/actions/override/set \
        ifname string $interface \
	ip ipv6addr $new_ip_address \
	netmask ipv6addr $new_subnet_mask \
	enabled bool true

    # Add a network route to the computed network address.
    for router in $new_routers; do
      mdreq_safe action /net/routes/actions/overlay/add/default \
          ifname string $interface \
	  gw ipv6addr $router
    done

    # Check if any routes are now reachable
    mdreq_safe action /net/routes/actions/recheck
  fi

  if [ "${PEERDNS}" != "no" ]; then 
    make_resolv_conf
  fi
  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then

  if [ x$old_ip_address != x ]; then
    # Shut down interface, which will delete routes and clear arp cache.
    mdreq_safe action /net/interface/actions/override/set \
        ifname string $interface \
        enabled bool false
  fi

  exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then

  mdreq_safe action /net/interface/actions/override/set \
      ifname string $interface \
      ip ipv6addr $new_ip_address \
      netmask ipv6addr $new_subnet_mask \
      enabled bool true

  set $new_routers
  if ping -q -c 1 -w 10 $1; then
    for router in $new_routers; do
      mdreq_safe action /net/routes/actions/overlay/add/default \
          ifname string $interface \
	  gw ipv6addr $router
    done

    # Check if any routes are now reachable
    mdreq_safe action /net/routes/actions/recheck

    if [ "${PEERDNS}" != "no" ]; then 
      make_resolv_conf
    fi
    exit_with_hooks 0
  fi

  mdreq_safe action /net/interface/actions/override/set \
      ifname string $interface \
      enabled bool false
  exit_with_hooks 1
fi

exit_with_hooks 0
