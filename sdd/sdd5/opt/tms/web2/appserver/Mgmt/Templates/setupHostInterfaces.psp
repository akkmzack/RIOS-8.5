<%
## Copyright 2006, Riverbed Technology, Inc., All rights reserved.
## Author: Don Tillman
##
## setupHostInterfaces.psp
## This is the template for the host interface settings.
%>

<%@page indentType="braces" %>
<%@page imports="Nodes, FormUtils, FormUtils:NodeEntry, RVBDUtils, HostUtils, NicFactory, ajaxentrytable, PagePresentation:Pagelet, wsm" %>
<%@page extends="Pagelet" %>

<% self.hasHelp = True %>

<psp:method name="css">
    return '''
#routeTable_main { width: 100%; }
#routeIPv6Table_main { width: 100%; }
'''
</psp:method>

<psp:method name="pageletNodes">
    # For RBM permissioning
    rbmPaths =  [
                    '/net/routes/config/ipv4/prefix/*',
                    '/net/routes/config/ipv6/prefix/::\\/0/nh/1/gw',
                ]
    for iface in ['primary', 'aux']:
        for path in [
                        '/net/interface/config/%s/enable',
                        '/net/interface/config/%s/addr/ipv4/dhcp',
                        '/net/interface/config/%s/addr/ipv4/dhcp_dyn_dns',
                        '/net/interface/config/%s/addr/ipv4/static/1/ip',
                        '/net/interface/config/%s/addr/ipv4/static/1/mask_len',
                        '/net/interface/config/%s/mtu',
                        '/net/interface/config/%s/type/ethernet/speed',
                        '/net/interface/config/%s/type/ethernet/duplex',
                        '/net/interface/config/%s/addr/ipv6/static/*',
                        '/net/interface/state/%s/supported/speed',
                        '/net/interface/state/%s/supported/duplex',
                        '/net/interface/state/%s/type/ethernet/speed',
                        '/net/interface/state/%s/type/ethernet/duplex',
                    ]:
            rbmPaths.append(path % iface)
    return rbmPaths
</psp:method>

<psp:method name="nodeEntries">
    mgmt = self.session().value('mgmt')
    entries = {
        'routingTable': NodeEntry(
            path='/net/routes/config/ipv4/prefix/*')}
    return entries
</psp:method>

<psp:method name="dialogEntries">
    mgmt = self.session().value('mgmt')
    fields = self.request().fields()
    policyName, pathPrefix, policyType = Nodes.cmcDecodeNodeMode(fields)

    # Base interface appliance on CMC
    if policyType:
        interfaceOptions = [('auto', 'Auto'), ('primary', 'primary'), ('aux', 'aux')]
        appliance, applianceProduct, applianceSerialNum = Nodes.parseApplianceParam(policyName)
        ifacesPresent = Nodes.getMgmtLocalChildrenNames(mgmt,
                    '/cmc/state/appliance/%s/%s/net/interface/state' %
                    (applianceProduct, applianceSerialNum))
        for interface in Nodes.allInterfaceIndices:
            option = 'inpath' + interface
            if option in ifacesPresent:
                option += ' (detected on appliance)'
            interfaceOptions.append((option, option))
    else:
        routableInterfaces = HostUtils.getRoutableInterfaces(mgmt)
        routableInterfaces = FormUtils.sortInterfacesByName(routableInterfaces)
        interfaceOptions = [(x, x) for x in routableInterfaces]
        interfaceOptions.insert(0, ('auto', 'Auto'))

    return {
        'dest': NodeEntry(
            name='dest',
            type='ipv4addr_opt',
            label='Destination IPv4 Address'),
        'netmask': NodeEntry(
            name='netmask',
            validate='subnetMask',
            label='IPv4 Subnet Mask'),
        'gateway': NodeEntry(
            name='gateway',
            type='ipv4addr',
            label='Gateway IPv4 Address',
            inputOptional=True),
        'interface': NodeEntry(
            name='interface',
            selectOptions=interfaceOptions,
            value='',
            label='Interface'),
        'destIPv6': NodeEntry(
            name='destIPv6',
            widgetClass='ipv6addr',
            validate='ipv6addr_opt',
            label='Destination IPv6 Address'),
        'prefixIPv6': NodeEntry(
            name='prefixIPv6',
            widgetClass='ipv6prefix',
            validate='ipv6prefix_opt',
            label='IPv6 Prefix'),
        'gatewayIPv6': NodeEntry(
            name='gatewayIPv6',
            widgetClass='ipv6addr',
            validate='ipv6addr',
            label='Gateway IPv6 Address',
            inputOptional=True),
        'interfaceIPv6': NodeEntry(
            name='interfaceIPv6',
            selectOptions=interfaceOptions,
            value='',
            label='Interface'),
#Temporarily removing ability to enable ipv6. To be revisited with CMC Bug 101408
#        'enableIPv6StackMode': FormUtils.NodeEntry(
#            path='/net/config/ipv6/enable',
#            type='bool',
#            widget='checkboxLeft',
#            label='Enable IPv6 on Base Interfaces',
#            action='updateUpdateables("baseInterfaceConfigForm"); updateUpdateables("mainRoutingTableIPv6Form")')
    }
</psp:method>

<%
mgmt = self.session().value('mgmt')
fields = self.request().fields()
policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
nodeEntries = self.nodeEntries()
dialogEntries = self.dialogEntries()
fromPolicyPage = (policyType != None) # For CMC
showIpv6 = RVBDUtils.ipv6Supported(self.request().fields())
self.beginPagelet()
%>
<div class="midLevel">
  <form method="post"
        action="<%= self.thisPageletRequest() %>" id="baseInterfaceConfigForm">
<%
if showIpv6 and False: {
%>
    <fieldset>
      <legend>IPv6</legend>
      <%= dialogEntries['enableIPv6StackMode'].html(self) %>
    </fieldset>
<%
}

# Create widgets for either the Primary or AUX interfaces

def _makeMgmtInterface(interface, interfacePretty, ipv6Supported): {
    params = {
        'mgmt': mgmt,
        'interface': interface,
        'fields': fields,
        'interfaceEnable': {'label': 'Enable %s Interface' % interfacePretty},
        'ipv4Dhcp': {'value': policyType and 'true'},
        'ipv4DynamicDNS': True,
        'ipv4Address': True,
        'ipv4Subnet': True,
        'mtu': True,
    }
    # for cmc policy pages, always show speed and duplex options.
    if fromPolicyPage or not Nodes.isVM(): {
        params['speed'] = {'selectOptions': NicFactory.getNativeSpeedOptions(mgmt, interface),
                    'hint': 'Negotiated: ' + Nodes.present(mgmt,
                    '/net/interface/state/%s/type/ethernet/speed' % interface)}
        params['duplex'] = {'selectOptions': NicFactory.getNativeDuplexOptions(mgmt, interface),
                    'hint': 'Negotiated: ' + Nodes.present(mgmt,
                    '/net/interface/state/%s/type/ethernet/duplex' % interface)}
    }
    if interface == 'primary': {
        params['ipv4Gateway'] = {'label': 'Default IPv4 Gateway'}
        if ipv6Supported: {
            params['ipv6Gateway'] = True
        }
    }
    if ipv6Supported: {
        params.update({
            'hasIpv6AutoAssign': not fromPolicyPage and True,
            'ipv6Enable': True,
            'ipv6Prefix': {'name': '%s_manIPv6Prefix' % interface},
            'ipv6Address': {'name': '%s_manIPv6Addr' % interface},
        })
    }
    return NicFactory.NicFactory(**params)
}

primaryInterface = _makeMgmtInterface('primary', 'Primary', RVBDUtils.ipv6Supported(fields))
auxiliaryInterface = _makeMgmtInterface('aux', 'Aux', RVBDUtils.ipv6Supported(fields))

%>
    <fieldset>
      <legend>Primary Interface</legend>
      <%= primaryInterface.html(self) %>
    </fieldset>
<%
# In the presence of HP Procurve, the auxiliary interface does not exist.
# Only SH may reside on an HP Procurve, so aux will always be present in the
# native CMC node hierarchy.
# For an appliance policy, the CMC cannot query the node for whether aux is
# present or absent, so on a policy page, we always assume aux exists and
# allow the user to configure it.
auxExists = fromPolicyPage or 'aux' == Nodes.present(wsm.mgmt, '/net/interface/state/aux')
if auxExists: {
%>
    <fieldset>
      <legend>Auxiliary Interface</legend>
      <%= auxiliaryInterface.html(self) %>
    </fieldset>
<%
}
%>
    <div>
      <input type="hidden" name="_action_" value="setupHostInterfaces" />
    </div>
    <%= FormUtils.formSubmitButtons(self) %>
  </form>
</div>

<%
# IPv4 Routing table:

addRoute = 'addRoute_'

routeTable = ajaxentrytable.AjaxEntryTable('route',
    url=self.urlForCmcEdit('/mgmt/xmldata?p=mainRoutes'),
    titleText='Main IPv4 Routing Table',
    emptyMessage='No current routes.',
    addButtonText='Add a New Route',
    addButtonName='addRoute',
    removeName='removeRoutes',
    removeButtonText='Remove Selected',
    removePrefix='selectedRoute_')

# cmc appliance policy version doesn't have the status column
if policyType: {
    routeTable.headerSpec = ('', 'Destination', 'Subnet Mask', 'Gateway', 'Interface')
    routeTable.rowSpec = """
[AjaxEntryTable.tdSelectCheckbox('id', 'selectedRoute_'),
 AjaxEntryTable.tdAttr('destination'),
 AjaxEntryTable.tdAttr('mask'),
 AjaxEntryTable.tdAttr('gateway'),
 AjaxEntryTable.tdAttr('interface')]"""
} else: {
    routeTable.headerSpec = ('', 'Destination', 'Subnet Mask', 'Gateway', 'Interface', 'Status')
    routeTable.rowSpec = """
[AjaxEntryTable.tdSelectCheckbox('id', 'selectedRoute_'),
 AjaxEntryTable.tdAttr('destination'),
 AjaxEntryTable.tdAttr('mask'),
 AjaxEntryTable.tdAttr('gateway'),
 AjaxEntryTable.tdAttr('interface'),
 AjaxEntryTable.tdAttr('status')]"""
}

routeTable.addDivContent = '''
<div class="midLevel">
  <table>
    %s
    %s
    %s
    %s
  </table>
</div>
''' % (dialogEntries['dest'].html(self, namePrefix=addRoute),
       dialogEntries['netmask'].html(self, namePrefix=addRoute),
       dialogEntries['gateway'].html(self, namePrefix=addRoute),
       dialogEntries['interface'].html(self, namePrefix=addRoute))
%>

<a name="MainRoutingTable" id="MainRoutingTable"></a>
<form method="post"
      action="<%= self.thisPageletRequest() %>">
  <div>
    <input type="hidden" name="_action_" value="setupHostInterfaces" />
    <%= routeTable.html(self, cssClass="topLevel") %>
  </div>
</form>

<%
if showIpv6: {

    # IPv6 Routing table:
    addRouteIPv6 = 'addRouteIPv6_'

    routeTableIPv6 = ajaxentrytable.AjaxEntryTable('routeIPv6',
        url=self.urlForCmcEdit('/mgmt/xmldata?p=mainRoutesIPv6'),
        titleText='Main IPv6 Routing Table',
        emptyMessage='No current routes.',
        addButtonText='Add a New Route',
        addButtonName='addRouteIPv6',
        addButtonOnclick='return validateIPv6Route()',
        removeName='removeRoutesIPv6',
        removeButtonText='Remove Selected',
        removePrefix='selectedRouteIPv6_')

    # cmc appliance policy version doesn't have the status column
    if policyType: {
        routeTableIPv6.headerSpec = ('', 'Destination', 'Prefix', 'Gateway', 'Interface')
        routeTableIPv6.rowSpec = """
[AjaxEntryTable.tdSelectCheckbox('id', 'selectedRouteIPv6_'),
 AjaxEntryTable.tdAttr('destination'),
 AjaxEntryTable.tdAttr('prefix'),
 AjaxEntryTable.tdAttr('gateway'),
 AjaxEntryTable.tdAttr('interface')]"""
    } else: {
        routeTableIPv6.headerSpec = ('', 'Destination', 'Prefix', 'Gateway', 'Interface', 'Status')
        routeTableIPv6.rowSpec = """
[AjaxEntryTable.tdSelectCheckbox('id', 'selectedRouteIPv6_'),
 AjaxEntryTable.tdAttr('destination'),
 AjaxEntryTable.tdAttr('prefix'),
 AjaxEntryTable.tdAttr('gateway'),
 AjaxEntryTable.tdAttr('interface'),
 AjaxEntryTable.tdAttr('status')]"""
    }

    routeTableIPv6.addDivContent = '''
<div class="midLevel">
  <table>
    %s
    %s
    %s
    %s
  </table>
</div>
''' % (dialogEntries['destIPv6'].html(self, namePrefix=addRouteIPv6),
       dialogEntries['prefixIPv6'].html(self, namePrefix=addRouteIPv6),
       dialogEntries['gatewayIPv6'].html(self, namePrefix=addRouteIPv6),
       dialogEntries['interfaceIPv6'].html(self, namePrefix=addRouteIPv6))
%>

<a name="MainRoutingTableIPv6" id="MainRoutingTableIPv6"></a>
<form method="post"
      action="<%= self.thisPageletRequest() %>" id="mainRoutingTableIPv6Form">
  <div id="mainRouteTableIPv6Div">
    <input type="hidden" name="_action_" value="setupHostInterfacesIPv6" />
    <%= routeTableIPv6.html(self, cssClass="topLevel") %>
  </div>
</form>

<% } %>

<% self.endPagelet() %>

<% if showIpv6: { %>

<script type="text/javascript">
// <![CDATA[

// We reject IPv6 routing addresses for 2 reasons:
// - A Gateway or an Interface MUST be specified.
// - If the DestIP address is link local (starts with "FE80:...") then an Interface
//   has to be specified (i.e., must be non-AUTO).
function validateIPv6Route() {
    var form = $('mainRoutingTableIPv6Form');
    var destIP = getFormValue(form, 'addRouteIPv6_destIPv6');
    var gateway = getFormValue(form, 'addRouteIPv6_gatewayIPv6');
    var interface = getFormValue(form, 'addRouteIPv6_interfaceIPv6');
    var alignNode = null;
    var content = null;

    if (gateway == '' && interface == 'auto') {
        alignNode = 'addRouteIPv6_gatewayIPv6';
        content = 'The Gateway cannot be left blank when the Interface is set to "Auto."';
    }
    else if (destIP.toLowerCase().indexOf('fe80') == 0) {
        alignNode = 'addRouteIPv6_destIPv6';
        content = 'When this Destination address is link local (i.e., starts with "FE80:...") ' +
                  'the Interface cannot be set to "Auto."';
    }

    if (content) {
        // create a RBT.Dialog (whose CSS attributes, images have been changed for DVA/EVA)
        var confirmDialog = new RBT.Dialog({
            alignNode: Y.one('input[name="' + alignNode + '"]'),
            content: content,
            buttons: [ { label: 'Ok', clickFn: RBT.Dialog.dismiss } ]
        }).render();
        return false;
    }
    return true;
}

// Use a DisplayControl object to control the visibility of the IPv6 Divs
var displayControl = new DisplayControl();
displayControl.display = function(div) {
    var form = $('baseInterfaceConfigForm');

    //Temporarily removing ability to enable ipv6. To be revisited with CMC Bug 101408
    //var ipv6Enabled = form['!!!<!!!%!!!= dialogEntries["enableIPv6StackMode"].elementName(self) !!!%!!!>!!!'].checked;
    var ipv6Enabled = true;

    switch (div) {
        case 'manualIPv6InterfaceSection_primary':
            return ipv6Enabled;
        case 'manualIPv6InterfaceSection_aux':
            return ipv6Enabled;
        case 'mainRouteTableIPv6Div':
            return ipv6Enabled;
    }
    return true;
}

addUpdateable('enable', displayControl, 'manualIPv6InterfaceSection_primary');
addUpdateable('enable', displayControl, 'manualIPv6InterfaceSection_aux');
addUpdateable('enable', displayControl, 'mainRouteTableIPv6Div');

// ]]>
</script>

<% } %>
