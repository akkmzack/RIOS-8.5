<%
## Copyright 2010, Riverbed Technology, Inc., All rights reserved.
#
# This page is a container for the simplified QoS setup pages.
# @author Andrew Hao
%>

<%@page indentType="braces" %>
<%@page imports="Nodes, FormUtils, RbtUtils, ajaxentrytable, PagePresentation:Pagelet, PagePresentation, qos, urllib, RVBDUtils" %>
<%@page extends="Pagelet" %>

<% self.hasHelp = True %>
<% self.relatedPages = ('reportQoSStatsOutbound',) %>

<psp:method name="css">
    return self.css_apps() + \
        self.css_sites() + \
        self.css_profiles()
</psp:method>

<psp:method name="pageletNodes">
    # For RBM permissioning
    name, pathPrefix, mode = Nodes.cmcDecodeNodeMode(self.request().fields())
    return [pathPrefix + '/rbt/hfsc/config/global/enable']
</psp:method>

<psp:method name="nodeEntries" params="interfaces">
    entries = {
        'shaping_enable': FormUtils.NodeEntry(
            path='/rbt/hfsc/config/global/enable',
            name='globalQosShapingEnable',
            type='bool',
            widget='checkboxLeft',
            label='Enable QoS Shaping'),
        'marking_enable': FormUtils.NodeEntry(
            path='/rbt/hfsc/config/global/mark_enable',
            name='globalQosMarkingEnable',
            type='bool',
            widget='checkboxLeft',
            label='Enable QoS Marking'),
        'overcommit_enable': FormUtils.NodeEntry(
            path='/rbt/hfsc/config/global/bw_overcommit',
            name='overcommit_enable',
            type='bool',
            widget='checkboxLeft',
            label='Enable Local WAN Oversubscription',
            # XXX/ahao Need a clearer explanation.
            tooltip='''
<p>
  Allow the sum of the remote site bandwidths to exceed the local WAN uplink speed.
</p>
<p>
  Recommended when the sum of the remote site bandwidths exceeds that of the
  local WAN uplink and enough sites will be active to oversubscribe the local WAN
  uplink.
</p>'''),
        'linkrate': FormUtils.NodeEntry(
            path='/rbt/hfsc/config/global/interface/primary/link_rate', # all interfaces have the same rate in Basic Outbound QoS, so we use primary just to populate the field.
            name='linkrate',
            type='uint32',
            widgetClass='medium',
            label='WAN Bandwidth',
            units='kbps',
            validate=('intInRange', '[1, 4294967295]'),
            inputOptional=True,
            filter=lambda x: int(x) != 0 and x or '',
            value=''),
        'globalDscp': FormUtils.NodeEntry(
            path='/rbt/sport/blade/general/config/wan/default/dscp',
            name='globalDscp',
            type='uint8',
            widget='select',
            selectOptions=RVBDUtils.makeDSCPSelectOptions([('255', 'No Setting')], True),
            label='Global DSCP',
            tooltip='DSCP value set on Steelhead-to-Steelhead signaling packets.')}

    for iface, enable in interfaces:
        entries[iface + '_enable'] = enable
    return entries
</psp:method>

<psp:method name="interfaces">
    """
    Return a list of interface, nodeentry, nodeentry triples:
      [('wan0_0', wan0_0EnableNodeEntry, wan0_1LinkRateNodeEntry),
       ('wan0_1', wan0_1EnableNodeEntry, wan0_1LinkRateNodeEntry), ...]
    """

    policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
    if policyType:
        # CMC case
        ifaces = ['primary']
        for i in Nodes.allInterfaceIndices:
            ifaces.append('wan%s' % i)
    else:
        # SH case
        mgmt = self.session().value('mgmt')
        ifaces = Nodes.getMgmtLocalChildrenNames(mgmt, '/rbt/hfsc/config/global/interface')
        ifaces = FormUtils.sortInterfacesByName(ifaces)

    result = []
    for iface in ifaces:
        enable = FormUtils.NodeEntry(
            path='/rbt/hfsc/config/global/interface/%s/enable' % iface,
            name='enableIface_%s' % iface,
            type='bool',
            widget='checkboxLeft',
            label='Enable QoS on <strong>%s</strong> ' % iface)
        result.append((iface, enable))
    return result
</psp:method>

<%
mgmt = self.session().value('mgmt')
interfaces = self.interfaces()
nodeEntries = self.nodeEntries(interfaces)
policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
fields = self.request().fields()
%>

<% self.beginPagelet() %>

<%
isEasyQos = Nodes.present(mgmt, pathPrefix + '/rbt/hfsc/config/global/easy_qos_mode') == 'true'
if not isEasyQos: {
    if policyType: {
        if 'editPolicy' in fields: {
            # Policy page is being edited
            advQosLink = '/mgmt/gui?p=setupAdvNet_qosClasses&amp;editPolicy=%s' % (urllib.quote_plus(fields['editPolicy']))
        }
        else: {
            # The appliance configuration is being viewed
            assert 'appConfig' in fields
            advQosLink = '/mgmt/gui?p=setupAdvNet_qosClasses&amp;appConfig=%s' % (urllib.quote_plus(fields['appConfig']))
        }
    }
%>

<form method="post"
      action="<% self.thisPageletRequest() %>"
      id="gatekeeperForm">
  <fieldset id="modeSwitchPane">
    <h2>You cannot use Basic Outbound QoS with an Advanced Outbound QoS configuration.</h2>
    <p>Advanced Outbound QoS configurations cannot be migrated back to Basic Outbound QoS configurations.</p>
<% if not policyType: { %>
    <fieldset class="option">
      <legend>Revert to a prior system configuration with Basic Outbound QoS settings.</legend>
      <p>Visit the Configure > Configurations page and <a href="/mgmt/gui?p=setupConfig">revert to a prior system configuration</a>.</p>
      <p>This is only applicable if you have a configuration containing Basic Outbound QoS settings (e.g. if you backed up your configuration prior to migrating Basic Outbound QoS to Advanced Outbound QoS).</p>
      <p class="warning">Your entire system configuration will be reset.</p>
    </fieldset>
<% } %>
    <fieldset class="option">
      <legend>Clear all QoS configurations and return to Basic Outbound QoS</legend>
      <p class="warning">
<% if policyType: { %>
        You will lose all existing QoS configurations in this policy, and start over with a blank Basic Outbound QoS configuration.
<% } else: { %>
        You will lose all existing QoS configurations, and start over with a blank Basic Outbound QoS configuration.
<% } %>
      </p>
      <input type="submit" name="clearQoSSettings" onclick="return confirm('Are you sure you wish to clear your QoS settings and return to Basic Outbound QoS? You will lose your current QoS configuration.');" value="Clear" />
    </fieldset>
<% if policyType: { %>
    <p><a href="<%=advQosLink%>">&#8592; Return to the Advanced Outbound QoS page</a>.</p>
<% } else: { %>
    <p><a href="/mgmt/gui?p=setupAdvNet_qosClasses">&#8592; Return to the Advanced Outbound QoS page</a>.</p>
<% } %>
    <input type="hidden" name="_action_" value="setupEasyQoS_easyGatekeeper" />
  </fieldset>
</form>

<%
  # Exit early so there aren't any dangling JS references.
  self.endPagelet()
  return
%>

<% }
else: {
%>

<!-- Local Site Config -->
<form id="easyQoS_localSiteForm" action="<%= self.thisPageletRequest() %>" method="post">
  <div>
    <fieldset>
      <legend>QoS Settings</legend>
      <%= nodeEntries['shaping_enable'].html(self, format='block') %>
      <div class="indent">
        <div>
          <%= nodeEntries['linkrate'].html(self, format='block') %>
<% for iface, enable in interfaces: { %>
          <%= nodeEntries[iface + '_enable'].html(self, format='block') %>
<% } %>
          <%= nodeEntries['overcommit_enable'].html(self, format='block') %>
        </div>
      </div>
    <div class="midLevel">
      <%= nodeEntries['marking_enable'].html(self, format='block') %>
    </div>
    <div class="midLevel">
      <%= nodeEntries['globalDscp'].html(self, format='block') %>
    </div>
    </fieldset>
    <%= FormUtils.formSubmitButtons(self, {'name': 'localSite',
                                           'value': 'Apply'}) %>
    <input type="hidden" name="_action_" value="setupEasyQoS_sites" />
  </div>
</form>


<div id="qosTabControl" class="tabControl">
  <div class="grayBorder">
    <%= FormUtils.radioTabControl(self,
                                  'qosTabs',
                                  ('sites', 'Sites', 'siteTab'),
                                  ('apps', 'Applications', 'appTab'),
                                  ('profiles', 'Service Policies', 'profileTab')) %>
    <div id="siteTab"><%@include file="includes/setupAdvNet_qosEasy_sites.psp" %></div>
    <div id="appTab"><%@include file="includes/setupAdvNet_qosEasy_apps.psp" %></div>
    <div id="profileTab"><%@include file="includes/setupAdvNet_qosEasy_profiles.psp" %></div>
  </div>
</div>

<% } %>

<% self.endPagelet() %>

<script type="text/javascript">
//<![CDATA[

// Given the new state of the RadioTabControl, update the tab in the UI.
function updateTabHistory(state) {
    // We override qosTabs.switchTo, so call the prototype method instead.
    RadioTabControl.prototype.switchTo.call(qosTabs, state);
};

/**
 * This uses the Y.History module to enable "history" on a per-tab
 * basis with the back button. This allows tabs to be bookmarked, and
 * form submissions to return the user back to the original tab.
 */

// The YUI.History module creates an iframe in IE7, which causes problems in
// our UI. We bypass it in that browser.
if (Y.UA.ie != 7) {
    var history = new Y.History({initialState: {"tab": "sites"}}); // sets the initial state of the history object
    updateTabHistory(history.get("tab")); // perform the actual switchTo for the initial state

    Y.on("history:change", function () {
        var currentState = history.get("tab");
        updateTabHistory(currentState);
    });
}


// This is called from the onclick of the RadioTabControl button. Do not
// actually do the switching like the original switchTo did. Instead, register
// a state change in the history module.
//
// This causes the history:change event to fire, which in turn calls
// updateTabHistory, which will update the UI.
qosTabs.switchTo = function(tabName) {
    if (Y.UA.ie == 7) {
        updateTabHistory(tabName);
        return false;
    } else {
        var currentState = history.get("tab");
        if (currentState != tabName) {
            // only update if user clicked on a different tab
            history.addValue("tab", tabName);
        }
        return false;
    }
};

/**
 * Sets the values of form elements according to XML data.
 * Assumes that XML attributes are identically named as form elements.
 *
 * @param form
 * @param xmlEl The XML element containing the attributes in question.
 * @param keywords
 *   A list of keywords. Each keyword names both the name of the form
 *   element and the XML attribute.
 * @param namePrefix
 *   The prefix to be prepended to the beginning of the form element name.
 */
function setFormValues(form, xmlEl, keywords, namePrefix) {
    for (var i = 0; i < keywords.length; i++) {
        var kw = keywords[i];
        setFormValue(form, namePrefix + kw, xmlEl.getAttribute(kw));
    }
}

//]]>
</script>
