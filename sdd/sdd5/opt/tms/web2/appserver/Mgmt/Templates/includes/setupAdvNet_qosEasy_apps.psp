<%
## Copyright 2010, Riverbed Technology, Inc., All rights reserved.
#
# This is an included template for the QoS page.
# @author Andrew Hao
%>

<%@page imports="RVBDUtils, qos" %>

<psp:method name="css_apps">
    return '''
/* Default AET width is too small for this table when HTTP pathname is long. */
#appTable_main {
    width: 100%
}

/* Displace a block over and down visually. */
.indentedSection {
    margin-left: 2em;
    margin-top: 1em;
}

/* Headers are bold, with some padding, and are bottom-aligned. */
.qosSettingsHeader {
    font-weight: bold;
    padding-bottom: 0.5em;
    vertical-align: bottom;
    height: 3em;
}

/* Shows a small integer */
.orderHeader,
.orderCell {
    width: 30px;
    text-align: right;
}


.qosSettingsMessage {
    font-style: italic;
    padding-bottom: 2px;
    padding-top: 5px;
}

/* Separate the L4 and L7 protocol params */
.level4ParamsSeparator {
    height: 12px;
}
'''
</psp:method>

<psp:method name="dialogEntries_apps">
    classDscpSpecialOptions = [('255', 'Reflect')]
    ruleDscpSpecialOptions =  [('254', 'Inherit from Service Class')] + classDscpSpecialOptions
    qopDscpSpecialOptions =  [('253', 'Inherit DSCP from Application')]

    mgmt = self.session().value('mgmt')
    qopPathsSubtree = Nodes.getTreeifiedSubtree(mgmt, '/rbt/pathmon/qop/config/path')
    qopPathOptions = [(qos.DEFAULT_PATH_NONE, '--')]
    for pathId in qopPathsSubtree:
        qopPathOptions.append((pathId, qopPathsSubtree[pathId]['path_name']))
    qopPathOptions.sort(FormUtils.alphanumericCompare, key=lambda x: x[1])

    # Port/Host Label doesn't have a link for CMC policy pages.
    policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
    if policyType:
        portLabelText = 'Port or Port Label'
        hostLabelText = 'Subnet or Host Label'
    else:
        portLabelText = 'Port or <a href="/mgmt/gui?p=setupPortLabels">Port Label</a>'
        hostLabelText = 'Subnet or <a href="/mgmt/gui?p=setupHostLabels">Host Label</a>'

    nodeEntryObjs = {
        'name': FormUtils.NodeEntry(
            name='name',
            validate='qosName',
            label='Name'),
        'order': FormUtils.NodeEntry(
            name='order',
            label='Position',
            widget='select'),
        'desc': FormUtils.NodeEntry(
            name='desc',
            widgetClass='wide',
            label='Description'),
        'srcSubnet':FormUtils.NodeEntry(
            name='srcsubnet',
            value='0.0.0.0/0',
            widgetClass='ipaddrm',
            label='Local %s' % hostLabelText,
            validate='subnetOrHostLabel'),
        'srcPort':FormUtils.NodeEntry(
            name='srcport',
            value='all',
            widgetClass='port',
            label=portLabelText,
            validate='portPortLabel'),
        'dstSubnet':FormUtils.NodeEntry(
            name='dstsubnet',
            value='0.0.0.0/0',
            widgetClass='ipaddrm',
            label='Remote %s' % hostLabelText,
            validate='subnetOrHostLabel'),
        'dstPort':FormUtils.NodeEntry(
            name='dstport',
            value='all',
            widgetClass='port',
            label=portLabelText,
            validate='portPortLabel'),
        'trProtocol':FormUtils.NodeEntry(
            name='protocol',
            selectOptions=qos.PROTOCOL_OPTIONS,
            label='Protocol'),
        'traffic':FormUtils.NodeEntry(
            name='traffic',
            selectOptions=(('all', 'All'),
                           ('optimized', 'Optimized'),
                           ('passthrough', 'Passthrough')),
            label='Traffic Type'),
        'dscp':FormUtils.NodeEntry(
            name='dscp',
            label='DSCP',
            widget='select',
            selectOptions=RVBDUtils.makeDSCPSelectOptions([('-1', 'All')], False),
            value='-1'),
        'vlan':FormUtils.NodeEntry(
            name='vlan',
            label='VLAN Tag ID',
            widgetClass='small',
            value='all',
            validate='vlan'),
        'cls': FormUtils.NodeEntry(
            name='cls',
            label='Service Class',
            widget='select',
            selectOptions=qos.DEFAULT_CLASSES),
        'out_dscp': FormUtils.NodeEntry(
            name='out_dscp',
            label='DSCP',
            widget='select',
            tooltip='Required if QoS Marking is enabled. Also applies to traffic when Path Selection is not enabled or all paths are down.',
            selectOptions=RVBDUtils.makeDSCPSelectOptions([
                                        ('254', 'Inherit from Service Class'),
                                        ('255', 'Reflect')
                                        ], True)),
        'default_path': FormUtils.NodeEntry(
            name='default_path',
            widget='radio',
            value=qos.DEFAULT_PATH_RELAY,
            label={qos.DEFAULT_PATH_RELAY: 'Relay traffic from the interface normally.',
                   qos.DEFAULT_PATH_DROP:  'Drop traffic.'}),
        'l7protocol': FormUtils.NodeEntry(
            name='l7protocol',
            label='Application',
            inputOptional=True,
            validate='validateL7App',
            action='updateApplicationField(this)', # This action is needed to handle when the user types in the L7 protocol.
            widgetClass='L7AppsAutoComplete'),
        'l7protocol_http_domain_name': FormUtils.NodeEntry(
            name='http_domain_name',
            label='Domain Name',
            hint='Use * to indicate wildcards.',
            inputOptional=True,
            validate='validateMaxWildcard'),
        'l7protocol_http_relative_path': FormUtils.NodeEntry(
            name='http_relative_path',
            label='Relative Path',
            tooltip='The part of the URL following the domain name.',
            hint='Use * to indicate wildcards.',
            inputOptional=True,
            validate='validateMaxWildcard'),
        }


    for pathNum in range(1, qos.NUM_QOP_PATHS + 1):
        if policyType:
            qopDict = {
                'qopPath%s' % pathNum: FormUtils.NodeEntry(
                    name='qopPath%s' % (pathNum),
                    label='Path %s' % (pathNum),
                    widget='text',
                    validate='qosName',
                    inputOptional=True,
                    action='updateCmcQopAppDscpFields()')
            }
        else:
            qopDict = {
                'qopPath%s' % pathNum: FormUtils.NodeEntry(
                    name='qopPath%s' % (pathNum),
                    label='Path %s' % (pathNum),
                    widgetClass='small',
                    action='updateQopAppDscpFields()',
                    selectOptions=qopPathOptions)
            }

        qopDict.update({
            'qopDscp%s' % pathNum: FormUtils.NodeEntry(
                name='qopDscp%s' % (pathNum),
                label='DSCP',
                widgetClass='small',
                selectOptions=RVBDUtils.makeDSCPSelectOptions(qopDscpSpecialOptions, True)),
        })
        nodeEntryObjs.update(qopDict)

    return nodeEntryObjs
</psp:method>

<%
addPrefix = 'addApp_'
editPrefix = 'editApp_'
dialogEntries_apps = self.dialogEntries_apps()
self.retargetCmcPolicyNodes()
mgmt = self.session().value('mgmt')
fields = self.request().fields()


# Create the JavaScript code needed for the autocomplete widgets.
layer7ProtoNamesDesc = qos.layer7ProtocolNamesAndDesc(mgmt, fields, flip=True).values()
layer7ProtoNamesDesc.sort(lambda a, b: FormUtils.alphanumericCompare(a[0], b[0]))
layer7ProtoNamesDesc = [{'name': name, 'description': desc} for name, desc in layer7ProtoNamesDesc]

# Compile the options for the Add Application's order select list.
policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
allGlobalAppIndices = Nodes.getMgmtLocalChildrenNames(mgmt, pathPrefix + '/rbt/hfsc/config/global_app')
allGlobalAppIndices.sort(key=int)

# We add a space to the end of the "End" option, see bug 70309 for details
dialogEntries_apps['order'].selectOptions = \
    [('1', 'Start')] + allGlobalAppIndices + \
    [(str(len(allGlobalAppIndices) + 1), str(len(allGlobalAppIndices) + 1))] + \
    [(str(len(allGlobalAppIndices) + 1) + ' ', 'End')]
dialogEntries_apps['order'].value = str(len(allGlobalAppIndices) + 1) + ' '

appTable = ajaxentrytable.AjaxEntryTable('app',
    url=self.urlForCmcEdit('/mgmt/xmldata?p=easyQoS_apps'),
    headerSpec=('',
                ('Order', 'orderHeader', 'sortAttrib("order")'),
                ('Name', '', 'sortAttrib("name")'),
                ('Service Class', '', 'sortAttrib("cls_sort")'),
                ('DSCP', 'dscpHeader', 'sortDscpCell("out_dscp_pretty")'),
                ('Application', '', 'sortAttrib("l7protocol_pretty")'),
                ('Paths', 'qopHeader')),
    rowSpec="""
[AjaxEntryTable.tdReorderCheckbox('order', 'selectedApp_', 'moveToSelectedApp_'),
 AjaxEntryTable.tdAttr('order', 'orderCell'),
 AjaxEntryTable.tdEdit('name', 'name'),
 AjaxEntryTable.tdAttr('cls'),
 AjaxEntryTable.tdAttr('out_dscp_pretty', 'dscpCell'),
 AjaxEntryTable.tdLines('l7protocol_pretty'),
 AjaxEntryTable.tdLines('qopPretty')]
""",
    rowDescSpec=('desc', 'AjaxEntryTable.cellFillDesc("desc")', 1),
    emptyMessage='No applications defined.',
    addButtonName='addApplication',
    addButtonText='Add Application',
    editButtonName='editApplication',
    moveName='moveApplication',
    moveButtonText='Move Application',
    moveButtonCancelText='Cancel Move',
    removeName='removeApplication',
    removeButtonText='Remove Application',
    postProcessing='AjaxEntryTable.postReorderCheckbox("order", "moveToSelectedApp_")')

def appsGenerateAddOrEditDiv(isAdd): {
    pfx = isAdd and addPrefix or editPrefix
    hiddenInputs = not isAdd and '''<input type="hidden" name="editApp_order" />''' or ''

    qopPathHtml = ''
    for pathNum in range(1, qos.NUM_QOP_PATHS + 1): {
        qopPathHtml += dialogEntries_apps['qopPath%s' % (pathNum)].html(self, namePrefix=pfx, more=[dialogEntries_apps['qopDscp%s' % (pathNum)]]) + '\n'
    }

    qopPathHintHtml = ''
    if policyType: {
        qopPathHintHtml += '''<tr><td colspan="2" class="qosSettingsMessage">Path preference order
                              (only one path will be used):</td></tr>'''
    } else: {
        qopPathHintHtml += '''<tr><td colspan="2" class="qosSettingsMessage">
                              <a href="/mgmt/gui?p=setupQos_qop">Path</a> preference order
                              (only one path will be used):</td></tr>'''
    }


    return """
<div class="midLevel">
  <div class="autoCompleteWidget">
  <table>
    %(name)s
    %(desc)s
    %(order)s
    <tr><td colspan="3" class="qosSettingsHeader">For Traffic with the Following Characteristics:</td></tr>
    %(srcSubnet)s
    %(dstSubnet)s
    %(trProtocol)s
    %(vlan)s
    %(dscp)s
    <tr><td class="level4ParamsSeparator"></td></tr>
    %(traffic)s
    %(app)s
    <tr><td colspan="3">
      <div class="l7http indentedSection">
        <table>
          %(http_domain_name)s
          %(http_relative_path)s
        </table>
      </div>
    </td></tr>
    <tr><td colspan="3" class="qosSettingsHeader">Apply these QoS Settings:</td></tr>
    %(cls)s
    %(out_dscp)s
    <tr><td colspan="3" class="qosSettingsHeader">Apply these Path Selections:</td></tr>
    %(qopPathHint)s
    %(qopPath)s
    <tr><td colspan="2" class="qosSettingsMessage">If paths are configured and all down:</td></tr>
    <tr><td colspan="3">
    <div id="%(pfx)sDefaultPathDiv" class="indent">
      %(ruleDefaultPathRelay)s
      %(ruleDefaultPathDrop)s
    </div>
    </td></tr>
  </table>
  </div>
  %(hiddenInputs)s
</div>
""" % {'name': dialogEntries_apps['name'].html(self, namePrefix=pfx),
       'desc': dialogEntries_apps['desc'].html(self, namePrefix=pfx),
       'order': isAdd and dialogEntries_apps['order'].html(self, namePrefix=pfx) or '',
       'srcSubnet': dialogEntries_apps['srcSubnet']\
           .html(self, namePrefix=pfx, more=[dialogEntries_apps['srcPort']]),
       'dstSubnet': dialogEntries_apps['dstSubnet']\
           .html(self, namePrefix=pfx, more=[dialogEntries_apps['dstPort']]),
       'trProtocol': dialogEntries_apps['trProtocol'].html(self, namePrefix=pfx),
       'vlan': dialogEntries_apps['vlan'].html(self, namePrefix=pfx),
       'dscp': dialogEntries_apps['dscp'].html(self, namePrefix=pfx),
       'traffic': dialogEntries_apps['traffic'].html(self, namePrefix=pfx),
       'app': dialogEntries_apps['l7protocol'].html(self, namePrefix=pfx),
       'http_domain_name': dialogEntries_apps['l7protocol_http_domain_name']\
           .html(self, namePrefix=pfx),
       'http_relative_path': dialogEntries_apps['l7protocol_http_relative_path']\
           .html(self, namePrefix=pfx),
       'cls': dialogEntries_apps['cls'].html(self, namePrefix=pfx),
       'out_dscp': dialogEntries_apps['out_dscp'].html(self, namePrefix=pfx),
       'qopPathHint': qopPathHintHtml,
       'qopPath': qopPathHtml,
       'ruleDefaultPathRelay': dialogEntries_apps['default_path'].html(self, namePrefix=pfx, value=qos.DEFAULT_PATH_RELAY),
       'ruleDefaultPathDrop':  dialogEntries_apps['default_path'].html(self, namePrefix=pfx, value=qos.DEFAULT_PATH_DROP),
       'hiddenInputs': hiddenInputs,
       'pfx': pfx}
}

appTable.addDivContent = appsGenerateAddOrEditDiv(True)
appTable.editDivContent = appsGenerateAddOrEditDiv(False)

%>

<form id="easyQoS_appsForm" method="post" action="<%= self.thisPageletRequest() %>">
  <div id="appsTab">
    <%= appTable.html(self, 'topLevel') %>
    <input type="hidden" name="_action_" value="setupEasyQoS_apps" />
  </div>
</form>

<%
# Need to generate the list of attribute names for the qop paths.
qopPathKeywordsList = ['qopPath%s' % (pathNum) for pathNum in range(1, qos.NUM_QOP_PATHS + 1)]
qopDscpKeywordsList = ['qopDscp%s' % (pathNum) for pathNum in range(1, qos.NUM_QOP_PATHS + 1)]

tabJs="""

// Put the options in a JS variable so we don't have the huge list written out to the page's HTML twice.
var l7protocol_autocomplete_options = %(l7protocolOptions)s;
var allL7protocolNames = {}; // generate the list from l7protocol_autocomplete_options so it doesn't have to be written out.
Y.Array.each(l7protocol_autocomplete_options, function (item) { allL7protocolNames[item.name] = null; });

// Initialize the AutoComplete widget
// Note : AutoComplete widget's "select" event is given a handler to update the application field
//        because the input NodeEntry's "action" only handle when the user types it in.
RBT._AutoComplete.makeAutoComplete('addApp_l7protocol', l7protocol_autocomplete_options,
                                   [['select', 'after', function() { updateApplicationField(this); }]]);
RBT._AutoComplete.makeAutoComplete('editApp_l7protocol', l7protocol_autocomplete_options,
                                   [['select', 'after', function() { updateApplicationField(this); }]]);

function updateQopAppDscpFields(val) {
    var prefix = ['add', 'edit'];
    for (var i = 0; i < prefix.length; i++) {
        for (var pathNum = 1; pathNum <= %(NUM_QOP_PATHS)s ; pathNum++) {
            var pathSelectList = Y.one('select[name="' + prefix[i] + 'App_qopPath' + pathNum + '"]');
            var dscpSelectList = Y.Selector.query('select[name="' + prefix[i] + 'App_qopDscp' + pathNum + '"]')[0];
            enableFormElements(dscpSelectList, !(pathSelectList.get('value') == '%(default_path_none)s'));
        }
    }
}

function updateCmcQopAppDscpFields(val) {
    var prefix = ['add', 'edit'];
    for (var i = 0; i < prefix.length; i++) {
        for (var pathNum = 1; pathNum <= %(NUM_QOP_PATHS)s ; pathNum++) {
            var pathSelectName = Y.one('input[name="' + prefix[i] + 'App_qopPath' + pathNum + '"]');
            var dscpSelectList = Y.Selector.query('select[name="' + prefix[i] + 'App_qopDscp' + pathNum + '"]')[0];
            enableFormElements(dscpSelectList, !(pathSelectName.get('value') == ''));
        }
    }
}

/**
 * Using the value in the "Application" field, show the
 * extended protocol options div for those applications that have them.
 *
 * In Easy QoS, only the HTTP protocol has options.
 *
 * @param selEl The <select> element that triggers this onchange.
 */
function updateApplicationField(selEl) {
    var container = Y.one(selEl).ancestor('.ajaxEntryTable_addDiv, .ajaxEntryTable_editDiv');
    var selEl = container.one('input.L7AppsAutoComplete');
    var isHttp = selEl.get('value') == 'HTTP';
    enableElements(container.one('.indentedSection'), isHttp ? true : 'hide');
}
appTable.addEntry = function() {
    var form = $('easyQoS_appsForm');
    updateApplicationField(form['addApp_l7protocol']);
}
appTable.editEntry = function(editName) {
    var form = $('easyQoS_appsForm');
    var el = this.getEntryElement('name', editName);

    setFormValue(form, 'editApp_name', editName);
    keywords = ['order', 'srcsubnet', 'srcport', 'dstsubnet', 'dstport', 'desc',
                'protocol', 'traffic', 'dscp', 'vlan', 'cls', 'out_dscp', 'default_path'];
    keywords = keywords.concat(%(qopPathKeywordsList)s, %(qopDscpKeywordsList)s);
    setFormValues(form, el, keywords, 'editApp_');
    setFormValue(form, 'editApp_l7protocol', el.getAttribute('l7protocol_pretty'));

    var isHttp = el.getAttribute('l7protocol_pretty') == 'HTTP';
    if (isHttp) {
        var nameAttr = el.getAttribute('l7protocol_http_domain_name') || '';
        var pathAttr = el.getAttribute('l7protocol_http_relative_path') || '';
        setFormValue(form, 'editApp_http_domain_name', nameAttr);
        setFormValue(form, 'editApp_http_relative_path', pathAttr);
    }
    updateApplicationField(form['editApp_l7protocol']);
}

function validateMaxWildcard(val) {
    if (val.split('*').length-1 > 5) {
        throw 'No more than 5 wildcards are allowed.';
    }
    return;
}

function validateL7App(val) {
    if (val in allL7protocolNames) {
        return;
    }
    throw 'Select an application from the dropdown list.';
}

// Sort order for the cell is the same as the order seen in the DSCP menu.
function sortDscpCell(name) {
    var cellValue = function(content) {
        if (content == 'from Class') {
            return -2;
        } else if (content == 'Reflect') {
            return -1;
        } else {
            return Number(content);
        }
    };
    return function(a, b) {
        return cellValue(a.getAttribute(name)) - cellValue(b.getAttribute(name));
    }
}

""" % {'l7protocolOptions': RVBDUtils.jsonizeAndEscapeForJs(layer7ProtoNamesDesc), 'NUM_QOP_PATHS': qos.NUM_QOP_PATHS, 'qopPathKeywordsList': qopPathKeywordsList, 'qopDscpKeywordsList': qopDscpKeywordsList, 'default_path_relay': qos.DEFAULT_PATH_RELAY, 'default_path_none': qos.DEFAULT_PATH_NONE}

if not policyType: {
    tabJs +='''
    appTable.updateHook = function() {
        updateQopAppDscpFields();
    }
    '''
} else: {
    tabJs +='''
    appTable.updateHook = function() {
        updateCmcQopAppDscpFields();
    }
    '''
}

self.addPageletJavascript(tabJs)
%>
