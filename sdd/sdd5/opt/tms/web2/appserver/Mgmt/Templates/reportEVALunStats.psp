<%
## Copyright 2012, Riverbed Technology, Inc., All rights reserved.
## Author: Sindhura Balireddi
##
## Lun Stats
%>

<%@page imports="Nodes, PagePresentation:Pagelet, Reports2, FormUtils, RVBDUtils, json, eva, ve" %>
<%@page extends="Pagelet" %>
<%@page indentType="braces" %>

<psp:method name="css">
#this is a css hack of the alwaysOnSeries class to hide unwanted series from the legend
    return '''
div.reports2LegendSeriesAlwaysOn {
    display: none;
}
.clearRight, .clearRight > div { clear: right; }
    '''
</psp:method>

<psp:method name="pageletNodes">
    return [ '/rbt/eva/ext/*' ]
</psp:method>

<psp:method name="getLunOptions">
    options = [('0', 'All')]
    mgmt = self.session().value('mgmt')
    basePath = eva.getStateNodePrefix(self.request().fields())
    luns = Nodes.getMgmtLocalChildrenNames(mgmt, '%s/rbt/eva/ext/lun-list/non-ss-lun' % basePath)
    for lun in luns:
        lunId = Nodes.present(mgmt, '%s/rbt/eva/ext/vlun/state/%s/subclass_id' % (basePath, lun))
        alias = Nodes.present(mgmt, '%s/rbt/eva/ext/vlun/config/%s/alias' % (basePath, lun))
        lun_serial = ve.unEscapeLUNSerial(lun)
        if alias:
            options.append((lunId, '%s (%s)' % (alias, lun_serial)))
        else:
            options.append((lunId, lun_serial))
    return options
</psp:method>

<psp:method name="nodeEntries">
    return {
        'lunReportName': FormUtils.NodeEntry(
            name='lunReportName',
            label='Lun Report',
            userPath='eva/web/reports/lun_graph',
            userConfigAutoSave=True,
            widget='select',
            selectOptions=(('lunIO', 'I/O'),
                           ('lunIOPS', 'I/O Operations Per Sec'),
                           ('lunIOLatency', 'I/O Latency')),
            action='paramChanged();',
        )
    }
</psp:method>

<psp:method name="dialogEntries">
    lunOptions = self.getLunOptions()
    return {
        'lunId': FormUtils.NodeEntry(
            name='lunId',
            label='LUN',
            widget='select',
            userPath='eva/web/reports/lun_graph_lun',
            userConfigAutoSave=True,
            selectOptions=lunOptions,
            action='paramChanged();'
        )
    }
</psp:method>

<%
self.hasHelp = True
mgmt = self.session().value('mgmt')
self.beginPagelet()
# only for EVA or Steelhead EX
if not eva.isCMC: {
    edgeLaunched, edgeLaunchMsg, edgeRefresh = eva.edgeLaunchCheck(mgmt)
    if not edgeLaunched: {
        self.writeln('<p>%s</p>' % edgeLaunchMsg)
        if edgeRefresh: {
            self.addPageletJavascript('RBT.VE.refreshLater();')
        }
        self.endPagelet()
        return
    }
}
%>
<psp:include path="/Templates/evaHAHeader.psp">

<div class="horizReportControls clearRight">
  <%= self.nodeEntries()['lunReportName'].html(self, format='block') %>
  <%= self.dialogEntries()['lunId'].html(self, format='block') %>
</div>

<div id="timeSeriesChart" class="clearRight"></div>

<% self.endPagelet() %>

<script type="text/javascript">
// <![CDATA[

var chart,
    seriesNames = <%= json.dumps(eva.REPORTS['LUN']) %>;

Y.on('domready', function () {
    $('timeSeriesChart').style.height = RBT.Reports2.availableHeight() + 'px';

    chart = new RBT.Reports2.TimeSeriesChartWithControls({
        parent: '#timeSeriesChart',
        dataUrl: assembleDataUrl(),
        dataFormatterFn: dataFormatter,
        customControlDiv: Y.one('div#reportControls'),
        options: assembleChartOptions(),
        statsFn: summaryData,
        alwaysOnSeries: [seriesNames.READ_OPS,
                         seriesNames.READ_TIMES,
                         seriesNames.WRITE_OPS,
                         seriesNames.WRITE_TIMES],
        initialWindow: <%= RVBDUtils.getReports2ChartWindow(self.session()) %>,
        boundariesChangedFn: setReports2ChartWindow
    });
});

// Create a data url with user input as params.
function assembleDataUrl() {
    // Collect user input.
    var lunReportName = Y.one('select[name="lunReportName"]').get('value'),
        lunId = Y.one('select[name="lunId"]').get('value'),
        dataUrl;
    dataUrl = '<%= Reports2.constructDataUrl("edgeLunIO") %>';
    dataUrl = addQueryStringParameter(dataUrl, 'displayGraph', lunReportName);
    dataUrl = addQueryStringParameter(dataUrl, 'lunId', lunId);
    return dataUrl;
}

function assembleChartOptions() {
    var options = RBT.Reports2.defaultHighstockOptions(),
        lunReportName = Y.one('select[name="lunReportName"]').get('value');

    switch (lunReportName) {
    case 'lunIO':
        options.yAxis[0].title.text = 'Throughput (B/s)';
        break;
    case 'lunIOPS':
        options.yAxis[0].title.text = 'Data (I/O per Second)';
        break;
    case 'lunIOLatency':
        options.yAxis[0].title.text = 'Latency (ms)';
        options.series = [{name: seriesNames.READ_LATENCY},
                          {name: seriesNames.WRITE_LATENCY},
                          {name: seriesNames.READ_OPS,
                           visible: false},
                          {name: seriesNames.READ_TIMES,
                           visible: false},
                          {name: seriesNames.WRITE_OPS,
                           visible: false},
                          {name: seriesNames.WRITE_TIMES,
                           visible: false}]
        break;
    }
    options.navigator.baseSeries = 0;
    options.navigator.series.lineColor = RBT.Reports2.BLUE;
    return options;
}

// The alwaysOnSeries option is used here to get the css classname for the corresponding series
// and hack it to hide these series from the legend. To be updated when the feature to
// hide series is available
function paramChanged() {
    chart.replaceChart({
        dataUrl: assembleDataUrl(),
        options: assembleChartOptions()
    });
}

// fix data formatters for each type of graph
function dataFormatter(value, seriesName) {
    if (seriesName === seriesNames.READ_TPUT ||
            seriesName === seriesNames.WRITE_TPUT) {
        return RBT.Reports2.scale(value, 1, 'si', 'B/s');
    } else if (seriesName === seriesNames.READ_IOPS ||
               seriesName === seriesNames.WRITE_IOPS) {
        return RBT.Reports2.roundWithPadding(value, 1);
    } else if (seriesName === seriesNames.READ_LATENCY ||
               seriesName === seriesNames.WRITE_LATENCY) {
        return RBT.Reports2.scale(value, 1, 'si', 'ms');
    } else {
        return;
    }
}

RBT.Reports2.latencyAvg = function (series1, series2) {
    var avg = 0,
        numSum = RBT.Reports2.sum(series2),
        denomSum = RBT.Reports2.sum(series1);
    if (denomSum > 0) {
        avg = numSum / denomSum;
    }
    return avg;
}

function summaryData(allSeriesData) {
    var lunReportName = Y.one('select[name="lunReportName"]').get('value'),
        summary = [];
    //TO DO: remove extra empty summaries passed when the js bug is resolved
    switch(lunReportName) {
    case 'lunIO':
        summary = [ ['Total: ' +
                     RBT.Reports2.scale(RBT.Reports2.integrate(allSeriesData[0]), 1, 'si', 'B'),
                     'Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.avg(allSeriesData[0]), 1, 'si', 'B/s')],
                    ['Total: ' +
                     RBT.Reports2.scale(RBT.Reports2.integrate(allSeriesData[1]), 1, 'si', 'B'),
                     'Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.avg(allSeriesData[1]), 1, 'si', 'B/s')],
                    [],[],[],[]
                  ];
        break;
    case 'lunIOPS':
        summary = [ ['Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.avg(allSeriesData[0]), 2, 'english', '')],
                    ['Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.avg(allSeriesData[1]), 2, 'english', '')],
                    [],[],[],[]
                  ];
        break;
    case 'lunIOLatency':
        summary = [ ['Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.latencyAvg(allSeriesData[2], allSeriesData[3]), 1, 'si', 'ms')],
                    ['Average: ' +
                     RBT.Reports2.scale(RBT.Reports2.latencyAvg(allSeriesData[4], allSeriesData[5]), 1, 'si', 'ms')],
                    [],[],[],[]
                  ];
        break;
    }
    return summary;
}

// ]]>
</script>
