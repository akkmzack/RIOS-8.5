<%
## Copyright 2006, Riverbed Technology, Inc., All rights reserved.
## Author: Don Tillman
##
## setupHostSettings.psp
##
## Basic Host Settings for Network and Time
%>

<%@page indentType="braces" %>
<%@page imports="Nodes, HostUtils, FormUtils, FormUtils:NodeEntry, ajaxentrytable, PagePresentation:Pagelet, RVBDUtils" %>
<%@page extends="Pagelet" %>

<% self.hasHelp = True %>

<psp:method name="css">
    return '''
#hostsTable_main { width: 430px; }
'''
</psp:method>

<psp:method name="pageletNodes">
    if RVBDUtils.isSH():
        import domainHealthCheck

        return domainHealthCheck.getPageletNodes()
    return ''
</psp:method>

<psp:method name="nodeEntries">
    return {
        'hostname': NodeEntry(
            path='/system/hostname',
            type='hostname',
            label='Hostname',
            labelClass='label-fixed-small'),
        # For RBM permissioning.
        'dnsServer1': NodeEntry(
            path='/resolver/nameserver/1/address',
            type='ipv6addr',
            widgetClass='ipv4addr',
            inputOptional=True,
            validate='ipv4addr',
            label='Primary DNS Server',
            labelClass='label-fixed-small'),
        'dnsServer2': NodeEntry(
            path='/resolver/nameserver/2/address',
            type='ipv6addr',
            widgetClass='ipv4addr',
            inputOptional=True,
            validate='ipv4addr',
            label='Secondary DNS Server',
            labelClass='label-fixed-small'),
        'dnsServer3': NodeEntry(
            path='/resolver/nameserver/3/address',
            type='ipv6addr',
            widgetClass='ipv4addr',
            inputOptional=True,
            validate='ipv4addr',
            label='Tertiary DNS Server',
            labelClass='label-fixed-small'),
        'proxy_enable': NodeEntry(
            path='/web/proxy/address',
            name='proxy_enable',
            widget='checkboxLeft',
            label='Enable Web Proxy',
            filter=lambda x: '0.0.0.0' == x and 'false' or 'true',
            enableDiv='proxy_enableDiv'),
        'proxy_host': NodeEntry(
            path='/web/proxy/address',
            name='proxy_host',
            widgetClass='ipaddr',
            validate='hostnameOrIp',
            label='Web/FTP Proxy',
            labelClass='label-fixed-small',
            filter=lambda x: x != '0.0.0.0' and x or ''),
        'proxy_port': NodeEntry(
            path='/web/proxy/port',
            name='proxy_port',
            type='uint16',
            label='Port',
            widgetClass='port'),
        'proxy_authEnable': NodeEntry(
            path='/web/proxy/username',
            name='proxy_authEnable',
            widget='checkboxLeft',
            label='Enable Authentication',
            filter=lambda x: x and 'true' or 'false',
            enableDiv='proxy_authDiv'),
        'proxy_authUser': NodeEntry(
            path='/web/proxy/username',
            name='proxy_authUser',
            label='User Name',
            labelClass='label-fixed-small-indent',
            validate='nonempty'),
        'proxy_authPassword': NodeEntry(
            path='/web/proxy/passwd',
            name='proxy_authPassword',
            widget='password',
            label='Password',
            labelClass='label-fixed-small-indent',
            # use password validation when that works
            validate='nonempty',
            filter=lambda x: x and FormUtils.bogusPassword or ''),
        'proxy_authType': NodeEntry(
            path='/web/proxy/authtype',
            name='proxy_authType',
            selectOptions=(('basic', 'Basic'), ('ntlm', 'NTLM'), ('digest', 'Digest')),
            label='Authentication Type')
        }
</psp:method>

<psp:method name="dialogEntries">
    mgmt = self.session().value('mgmt')
    return {
        'host_ip': NodeEntry(
            name='host_ip',
            widgetClass='ipv6addr',
            validate='ipv4OrIpv6Addr',
            label='IP Address'),
        'host_name': NodeEntry(
            name='host_name',
            validate='hostname',
            label='Hostname'),
        'dnsDomainList': NodeEntry(
            name='dnsDomainList',
            inputOptional=True,
            validate='hostnameTextArea',
            label='DNS Domain List',
            widget='textarea',
            widgetClass='dnsDomainList',
            value='\n'.join(HostUtils.getDomainList(mgmt, self)))
    }
</psp:method>

<%
mgmt = self.session().value('mgmt')
policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
nodeEntries = self.nodeEntries()
dialogEntries = self.dialogEntries()

# hosts table
hostsTable = ajaxentrytable.AjaxEntryTable('hosts',
    url=self.urlForCmcEdit('/mgmt/xmldata?p=dnsHosts'),
    headerSpec=('', 'IP Address', 'Hostname'),
    rowSpec="""
[AjaxEntryTable.tdSelectCheckbox('id', 'selectedHost_'),
 AjaxEntryTable.tdAttr('ipaddr'),
 AjaxEntryTable.tdChildAttr('hostname', 'name')]""",
    emptyMessage='No hosts.',
    removeName='removeHosts',
    removeButtonText='Remove Selected',
    removePrefix='selectedHost_',
    addButtonText='Add a New Host',
    addButtonName='addHost')

hostsTable.addDivContent = '''
  <div class="midLevel">
    <table>
      %s
      %s
    </table>
  </div>
''' % (dialogEntries['host_ip'].html(self),
       dialogEntries['host_name'].html(self))
%>

<% self.beginPagelet() %>

<form method="post"
      action="<%= self.thisPageletRequest() %>"
      id="hostForm">

  <!-- Hostname -->
  <fieldset>
    <legend>Name</legend>
    <div class="midLevel">
      <table>
        <%= nodeEntries['hostname'].html(self) %>
      </table>
    </div>
  </fieldset>

  <!-- DNS Settings -->
  <fieldset>
    <legend>DNS Settings</legend>
    <div class="midLevel">
      <table>
        <%= nodeEntries['dnsServer1'].html(self) %>
        <%= nodeEntries['dnsServer2'].html(self) %>
        <%= nodeEntries['dnsServer3'].html(self) %>
        <%= dialogEntries['dnsDomainList'].html(self) %>
      </table>
    </div>
  </fieldset>

  <!-- Hosts -->
  <fieldset>
    <legend>Hosts</legend>
    <div class="midLevel">
      <%= hostsTable.html(self) %>
    </div>
  </fieldset>

  <fieldset>
    <legend>Web/FTP Proxy</legend>
    <div class="midLevel">
      <%= nodeEntries['proxy_enable'].html(self) %>
      <div id="proxy_enableDiv" class="indent">
        <table>
          <%= nodeEntries['proxy_host'].html(self,
                                              more=(nodeEntries['proxy_port'],)) %>
        </table>
        <%= nodeEntries['proxy_authEnable'].html(self) %>
        <div id = "proxy_authDiv" class="indent">
          <table>
            <%= nodeEntries['proxy_authUser'].html(self) %>
            <%= nodeEntries['proxy_authPassword'].html(self) %>
            <%= nodeEntries['proxy_authType'].html(self) %>
          </table>
        </div>
      </div>
    </div>
  </fieldset>

  <div>
    <input type="hidden" name="_action_" value="setupHostSettings" />
  </div>
  <%= FormUtils.formSubmitButtons(self) %>
</form>

<%
    domainHealthCheckOutput = ''
    if RVBDUtils.isSH(): {
        import domainHealthCheck

        domainHealthCheckOutput = domainHealthCheck.DomainHealthCheck.makeSections(self, [("test_section", "testdns")], False)
    }
%>
<%= domainHealthCheckOutput %>

<% self.endPagelet() %>

<script type="text/javascript">
<!--

// -->
</script>


