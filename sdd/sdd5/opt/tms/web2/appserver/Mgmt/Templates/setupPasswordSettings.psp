<%

## Copyright 2012, Riverbed Technology, Inc., All rights reserved.
## Author: Venkatram Ramanathan
##
## setupPasswordSettings.psp
## This page provides an admin the ability to configure Account Control Policies
##

%>

<%@page indentType="braces" %>
<%@page imports="FormUtils, PagePresentation:Pagelet" %>
<%@page extends="Pagelet" %>

<% self.hasHelp = True %>
<% self.relatedPages = ('setupSecurityPermissions',) %>

<psp:method name="css">
    return '''
.passwordHeaderFirstRow,
.passwordHeader {
    padding-top: 1.5em;
    padding-bottom: 0.5em;
    vertical-align: bottom;
}
.passwordHeader {
    font-weight: bold;
}

/* for links that don't really take you to another URL, don't
 * underline them or use the "visited" color */
.pseudoLink:link,
.pseudoLink:visited {
  color: #33C;
  text-decoration: none;
}
.pseudoLink:hover {
  color: #F60;
}
.dimmed .pseudoLink {
  color: #999999;
  cursor: default;
}
'''
</psp:method>


<psp:method name="nodeEntries">
    # filter function for nodeentries created below. In CMC, nodes are not present
    # intially and hence 'x' has to be checked for empty string before using as int.
    filter_fn = lambda x: (x and int(x) >= 0) and x or ''
    return {
        'adminOnlyRBA': FormUtils.NodeEntry(
            path='/rbm_fake/rbm/config/permissions/admin_only',
            type='string'),
        'enableAccCtrl': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/enable',
            widget='checkboxLeft',
            name='enableAccCtrl',
            label='Enable Account Control',
            enableDiv='acctControl'),
        'noDictWords': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_no_dict_word',
            widget='checkboxLeft',
            hint='<span class="strongHint hidden">(Checked)</span><span class="basicHint hidden">(Checked)</span>',
            name='noDictWords',
            label='Prevent Dictionary Words'),
        'maxRetry': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/max_retry',
            name='maxRetry',
            widgetClass='small',
            validate=('intInRange', '[0, 2147483647]'),
            hint='<span class="strongHint hidden">3</span><span class="basicHint hidden">blank</span>',
            label='Login Attempts Before Lockout',
            tooltip='The number of times a login can fail (due to an invalid password) before further login attempts for that account are rate-limited.',
            filter=filter_fn,
            inputOptional=True),
        'retryUnlockTime': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/retry_unlock_time',
            validate='uint32',
            name='retryUnlockTime',
            widgetClass='small',
            hint='<span class="strongHint hidden">300</span><span class="basicHint hidden">300</span>',
            label='Timeout for User Login After Lockout (seconds)',
            tooltip='The time a user must wait between login attempts after the account has been locked out.'),
        'passwordExpiryDays': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_expire',
            name='passwordExpiryDays',
            filter=filter_fn,
            validate=('intInRange', '[0, 2147483647]'),
            hint='<span class="strongHint hidden">60</span><span  class="basicHint hidden">blank</span>',
            label='Days Before Password Expires',
            widgetClass='small',
            inputOptional=True),
        'passwordExpiryWarn': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_expire_warn',
            validate='uint32',
            name='passwordExpiryWarn',
            widgetClass='small',
            hint='<span class="strongHint hidden">7</span><span class="basicHint hidden">7</span>',
            label='Days to Warn User of an Expiring Password'),
        'passwordLockDays': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_lock',
            name='passwordLockDays',
            validate=('intInRange', '[0, 2147483647]'),
            hint='<span class="strongHint hidden">305</span><span class="basicHint hidden">blank</span>',
            filter=filter_fn,
            label='Days to Keep Account Active After Password Expires',
            tooltip='During this period the user will be required to change the password upon login.  Afterwards, the account is disabled and will require administrator intervention to enable.',
            inputOptional=True,
            widgetClass='small'),
        'passwordChangeDays': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_change_interval',
            name='passwordChangeDays',
            validate=('intInRange', '[0, 2147483647]'),
            hint='<span class="strongHint hidden">1</span><span class="basicHint hidden">0</span>',
            filter=filter_fn,
            label='Days Between Password Changes',
            tooltip='This controls how often users may change their passwords.',
            widgetClass='small'),
        'minimumPasswordLength': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_len',
            validate=('intInRange', '[6, 4294967295]'),
            name='minimumPasswordLength',
            widgetClass='small',
            hint='<span class="strongHint hidden">14</span><span class="basicHint hidden">6</span>',
            label='Minimum Password Length'),
        'minimumUpperCase': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_ucredit',
            validate='uint32',
            name='minimumUpperCase',
            widgetClass='small',
            hint='<span class="strongHint hidden">1</span><span class="basicHint hidden">0</span>',
            label='Minimum Uppercase Characters'),
        'minimumLowerCase': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_lcredit',
            validate='uint32',
            name='minimumLowerCase',
            hint='<span class="strongHint hidden">1</span><span class="basicHint hidden">0</span>',
            widgetClass='small',
            label='Minimum Lowercase Characters'),
        'minimumNumerical': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_dcredit',
            validate='uint32',
            name='minimumNumerical',
            hint='<span class="strongHint hidden">1</span><span class="basicHint hidden">0</span>',
            widgetClass='small',
            label='Minimum Numerical Characters'),
        'minimumSpecial': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_ocredit',
            validate='uint32',
            name='minimumSpecial',
            widgetClass='small',
            hint='<span class="strongHint hidden">1</span><span class="basicHint hidden">0</span>',
            label='Minimum Special Characters'),
        'minimumInterval': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_reuse_interval',
            validate='uint32',
            name='minimumInterval',
            widgetClass='small',
            hint='<span class="strongHint hidden">5</span><span class="basicHint hidden">0</span>',
            tooltip='The number of password changes before an old password can be reused. <br/>' +
                    'Set this to zero to enable immediate reuse of passwords.',
            label='Minimum Interval for Password Reuse'),
        'minimumDifference': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_min_char_diff',
            validate='uint32',
            name='minimumDifference',
            hint='<span class="strongHint hidden">4</span><span class="basicHint hidden">0</span>',
            tooltip='The number of characters by which a new password must differ from the existing one.',
            widgetClass='small',
            label='Minimum Character Difference Between Passwords'),
        'maximumRepeatingChars': FormUtils.NodeEntry(
            path='/aaa/auth/config/policies/pass_max_char_repeat',
            validate='uint32',
            name='maximumRepeatingChars',
            hint='<span class="strongHint hidden">3</span><span class="basicHint hidden">0</span>',
            tooltip='Limits how many times the same character can occur next to each other.',
            widgetClass='small',
            label='Maximum Consecutively Repeating Characters'),
    }
</psp:method>

<%
nodeEntries = self.nodeEntries()
policyName, pathPrefix, policyType = self.retargetCmcPolicyNodes()
%>

<% self.beginPagelet() %>


<form method="post"
      action="<%= self.thisPageletRequest() %>"
      id="localPasswordForm">
  <div class="topLevel">
    <%= nodeEntries['enableAccCtrl'].html(self) %>
    <div id="acctControl" class="indent">
       <div class="passwordHeaderFirstRow">Populate values using:
       <a href="#" class="pseudoLink" onmouseover="showValues('strong')" onmouseout="showValues('')" onclick="populateValue('strong'); return false;">Strong Security Template</a> or
       <a href="#" class="pseudoLink" onmouseover="showValues('basic')" onmouseout="showValues('')" onclick="populateValue('basic'); return false;">Basic Security Template</a>
    </div>
      <table>
        <tr><td class="passwordHeader">Password Management:</td></tr>
        <%= nodeEntries['maxRetry'].html(self) %>
        <%= nodeEntries['retryUnlockTime'].html(self) %>
        <%= nodeEntries['passwordExpiryDays'].html(self) %>
        <%= nodeEntries['passwordExpiryWarn'].html(self) %>
        <%= nodeEntries['passwordLockDays'].html(self) %>
        <%= nodeEntries['passwordChangeDays'].html(self) %>
        <%= nodeEntries['minimumInterval'].html(self) %>
        <tr><td class="passwordHeader">Password Characteristics:</td></tr>
        <%= nodeEntries['minimumPasswordLength'].html(self) %>
        <%= nodeEntries['minimumUpperCase'].html(self) %>
        <%= nodeEntries['minimumLowerCase'].html(self) %>
        <%= nodeEntries['minimumNumerical'].html(self) %>
        <%= nodeEntries['minimumSpecial'].html(self) %>
        <%= nodeEntries['minimumDifference'].html(self) %>
        <%= nodeEntries['maximumRepeatingChars'].html(self) %>
        <tr><td><%= nodeEntries['noDictWords'].html(self) %></td></tr>
      </table>
    </div>
    <input type="hidden" name="_action_" value="setupAuthPolicy" />
  </div>
  <%= FormUtils.formSubmitButtons(self) %>
</form>


<% self.endPagelet() %>

<script type="text/javascript">
// <![CDATA[

// popupulateValue function populates the fields with the predefined
// values of the two templates: strong and basic.
function populateValue(template) {
    // Do not populate values when account control is not enabled.
    var form = $('localPasswordForm');
    if (!Y.one('input[name=enableAccCtrl]').get('checked')) {
        return;
    }
    if ('strong' == template) {

        setFormValue(form, 'noDictWords', 'true');
        setFormValue(form, 'maxRetry', '3');
        setFormValue(form, 'retryUnlockTime', '300');
        setFormValue(form, 'passwordExpiryDays', '60');
        setFormValue(form, 'passwordExpiryWarn', '7');
        setFormValue(form, 'passwordLockDays', '305');
        setFormValue(form, 'passwordChangeDays', '1');
        setFormValue(form, 'minimumInterval', '5');
        setFormValue(form, 'minimumPasswordLength', '14');
        setFormValue(form, 'minimumUpperCase', '1');
        setFormValue(form, 'minimumLowerCase', '1');
        setFormValue(form, 'minimumNumerical', '1');
        setFormValue(form, 'minimumSpecial', '1');
        setFormValue(form, 'minimumDifference', '4');
        setFormValue(form, 'maximumRepeatingChars', '3');

    }
    else { // Basic link is clicked

        setFormValue(form, 'noDictWords', 'true');
        setFormValue(form, 'maxRetry', '');
        setFormValue(form, 'retryUnlockTime', '300');
        setFormValue(form, 'passwordExpiryDays', '');
        setFormValue(form, 'passwordExpiryWarn', '7');
        setFormValue(form, 'passwordLockDays', '');
        setFormValue(form, 'passwordChangeDays', '0');
        setFormValue(form, 'minimumInterval', '0');
        setFormValue(form, 'minimumPasswordLength', '6');
        setFormValue(form, 'minimumUpperCase', '0');
        setFormValue(form, 'minimumLowerCase', '0');
        setFormValue(form, 'minimumNumerical', '0');
        setFormValue(form, 'minimumSpecial', '0');
        setFormValue(form, 'minimumDifference', '0');
        setFormValue(form, 'maximumRepeatingChars', '0');
    }
}

function showValues(template) {

    // Do not show values when account control is not enabled.
    if (!Y.one('input[name=enableAccCtrl]').get('checked')) {
        return;
    }
    if ('strong' == template){
        Y.all('.basicHint').addClass('hidden');
        Y.all('.strongHint').removeClass('hidden');
    }
    else if ('basic' == template) {
        Y.all('.strongHint').addClass('hidden');
        Y.all('.basicHint').removeClass('hidden');
    }
    else {
        Y.all('.strongHint').addClass('hidden');
        Y.all('.basicHint').addClass('hidden');
    }
}

// ]]>
</script>
