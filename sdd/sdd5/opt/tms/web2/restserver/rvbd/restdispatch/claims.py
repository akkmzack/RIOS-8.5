
from rvbd.restdispatch import constants
import base64
import json
import os
import socket
import time
import uuid

class Claims:

    def __init__(self, encoded_data=None, jti=None, issuer=None, principle=None, lifetime=0, audience=None):
        """!
        With no arguments passed or values for jti, issuer, principle, lifetime
        explicitly passed into the function, this constructor will generate a
        new claims set. If encoded_data is passed in, the constructor will
        initialize this claims with the passed data.

        @param encoded_data base64url encoded json containing the claims set.

        @param jti the JTI to use for the access code. If not specified, this
        call will generate a JTI as a version 4 UUID.

        @param issuer this should be the base URL of the server providing the REST
        API interface (ie. the caller of this function). If not specified, this
        call will assume 'https://<hostname>/' where the hostname is whatever is
        returned by python's socket facility to determine the hostname.

        @param principle this should be the user that requested the access code. If
        not specified, this call will determine which user account is calling
        this function and use that account's name.

        @param lifetime duration in seconds of this access code will be valid. If not
        specified, the access code will not expire.

        @param audience this should be the URL of the token endpoint of the issuing server.
        If not specified, it will be generated by tacking on /token to the end of the
        base URL.
        """

        if encoded_data != None:
            self.__claims = json.loads(base64.urlsafe_b64decode(encoded_data))
        else:
            self.__generate(jti, issuer, principle, lifetime, audience)

    def __generate(self, jti, issuer, principle, lifetime, audience):

        # If no JTI was specified, we need to generate one using UUID.
        # we'll go with a version 4 UUID.

        if jti == None:
            jti = str(uuid.uuid4())

        # Check for the issuer and if None is specified, then we will use
        # python's socket facility to try to determine the hostname or
        # the fully qualified hostname of the host this script is running on.

        if issuer == None:
            hostname = socket.gethostname()
            if hostname.find('.') == -1:
                try:
                    hostname = socket.gethostbyname_ex(hostname)[0]
                except (socket.gaierror, socket.herror):
                    # socket exceptions can be raised with some DNS setups
                    # see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=632917
                    pass

            issuer = 'https://%s' % hostname

        if audience == None:
            audience = '%s/api/common/%s/token' % (issuer, constants.COMMON_VERSION)

        # If no principle was specified, we will attempt to lookup the user
        # of the system that called this function.

        if principle == None:
            principle = os.getlogin()

        # Calculate the expiration date of the access code.
        # if lifetime is 0, then the access code should never expire.

        issued_time = int(time.time())
        exp_time = 0
        if lifetime > 0:
            exp_time = issued_time + lifetime

        # Generate the claims set

        self.__claims = {}
        self.__claims['iss'] = issuer
        self.__claims['jti'] = jti
        self.__claims['prn'] = principle
        self.__claims['aud'] = audience
        self.__claims['iat'] = str(issued_time)
        self.__claims['exp'] = str(exp_time)

    def exists(self, field_name):
        """!
        Returns whether or not the field name exists in the claims.
        @return True or False
        """
        return field_name in self.__claims

    def get_field(self, field_name):
        """!
        Returns the values corresponding to the field in the claims.
        @param field_name the name of the field.
        @return the value of the field.
        """
        return self.__claims[field_name]

    def get_json(self):
        """!
        Returns the claims as json.
        @return json.
        """
        return json.dumps(self.__claims)

    def get_encoded(self):
        """!
        Returns the claims as base64 encoded json.
        @return base64url encoded json.
        """
        return base64.urlsafe_b64encode(self.get_json())
