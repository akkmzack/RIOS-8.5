#!/usr/bin/python

from os.path import exists
from sys import exit
from os import system, popen, rmdir, mkdir, chmod
from aigen_common import *
from kernel import get_kernel_cmdline

def write_grub(next_boot, titles, disk, num_titles,
               flash = False, mixed = False,
               manufacturing = False):
    txt = """serial --unit=0 --speed=9600 --word=8 --parity=no --stop=1
terminal --timeout=10 --dumb serial console
"""
    if not mixed:
        if disk.find("md",5,7) != -1:
            if next_boot == 2:
                fallback = '3 0 1'
                txt += "default=2\n"
            else:
                fallback = '1 2 3'
                txt += "default=0\n"
        else:
            if next_boot == 1:
                fallback = '1'
            else:
                fallback = '0'
                if num_titles > 2:
                    i = 2
                    while i < num_titles:
                        fallback += " %d" % i
                        i += 1
            txt += "default=%d\n" % (next_boot - 1)

    else:
        fallback = ''
        if num_titles > 2:
            i = 1
            while i < num_titles:
                if i == 1:
                    fallback += "%d" % i
                else:
                    fallback += " %d" % i
                i += 1
        txt += "default=%d\n" % 0

    txt += "timeout=5\n"
    txt += "fallback=%s\n\n\n" % fallback
    if flash:
        txt += "hiddenmenu\n\n"

    password = check_password()
    if password != "":
        if password.find('$1$') == 0:
            txt += 'password --md5 %s\n\n' % password
        else:
            txt += 'password --encrypted %s\n\n' % password

    txt += titles

    if flash:
        if manufacturing:
            makedirs("/flash/cfg")
            system("mount /dev/hda1 /flash/cfg > /dev/null 2>&1")
        filename = '/flash/cfg/boot/grub/grub.conf'
    else:
        if manufacturing:
            mkdir("/bootmgr")
            if disk[:-1] == '/dev/flash' or disk[:-1] == '/dev/disk':
                system("mount %sp1 /bootmgr > /dev/null 2>&1" % disk)
            else:
                system("mount %s1 /bootmgr > /dev/null 2>&1" % disk)
        filename = '/bootmgr/boot/grub/grub.conf'

    try:
        file = open(filename, 'w')
        file.write(txt)
        file.close()
        chmod(filename, 0600)
    except Exception:
        if not manufacturing:
            if flash:
                system("/usr/bin/logger -p user.warn -t aigen Unable to write flash grub.")
            else:
                system("/usr/bin/logger -p user.warn -t aigen Unable to write disk grub.")
        else:
            print "Could not write grub."

    #cleanup
    if manufacturing:
        if flash:
            system("umount /dev/hda1 > /dev/null 2>&1")
            rmdir("/flash/cfg")
            rmdir("/flash")
        else:
            while exists("/bootmgr/boot/grub/grub.conf"):
                system("umount /bootmgr > /dev/null 2>&1")
                sleep(.1)
            rmdir("/bootmgr")


## make_title
# @param -> The version string from the build file
# @param -> type "disk_target"|"flash_target"
# @param -> target device eg: /dev/sda
# @param -> the partition number from which we will boot by default
# @param -> the partition number for the other boot partition
# @param -> if the machine is in manufacturing mode or upgrade mode
# Returns the title for a grub option, need to be run for each option
#
def make_title(ver_string, type, target, default_boot, next_boot = 0, manufacturing = False):
    #note, for all current units, flash is /dev/hda, and hd1 in flash grub context
    flash = "/dev/hda"
    flash_grub = "hd0"

    password = check_password()

    lock_str = ''
    if default_boot != next_boot and password != '':
        lock_str += '\tlock\n'
    
    kernel_opts = get_kernel_cmdline()        

    ret = ''
    if( type == 'disk_target' or type == 'flash_target' ):
        if next_boot == 0:
            #die horribly
            exit(1)

        if( type == 'disk_target' ):
            disk_grub = 'hd0'
            disk_target = target
        else:
            disk_grub = 'hd1'
            disk_target = '/dev/sda'

        arch = vstring_to_arch(ver_string)
        ret += vstring_to_title(ver_string)
        ret += lock_str
        ret += "\troot (%s%s)\n" % (disk_grub, ",%d" % next_boot )
        if( arch == 'i386'):
            ret += "\tuppermem 204800\n"

        # XXX/munirb: The problem here is that the older versions of software 4.1.2, 4.0.5, etc
        # did not have the /rbt-initrd.img file and the later version aigen.py sets the additional line
        # in grub. This will cause fallback issues.
        # To solve the problem, I will check if the rbt-initrd.img file is present in the partition
        # if it is present add the line to grub or else skip it.
        # If there are any exceptions we just add the initrd line as that will make the future versions
        # usable, only reverts would fail, which at that point would be acceptable.
        img_initrd = False
        if not manufacturing:
            try:
                if not exists("/var/tmp/initrd-test"):
                    if mkdir("/var/tmp/initrd-test/") > 0:
                        img_initrd = True
                err = system("mount %s%d /var/tmp/initrd-test/ > /dev/null 2>&1" %
                        (disk_target, next_boot + 1))
                if err > 0:
                    img_initrd = True

                img_initrd = exists('/var/tmp/initrd-test/rbt-initrd.img')
                # Nothing we can do here if unmount fails, we are jacked. I would like to add a retry, but not now
                system("/bin/umount /var/tmp/initrd-test > /dev/null 2>&1")
                rmdir("/var/tmp/initrd-test/")
            except OSError:
                img_initrd = True

        ret += "\tkernel /vmlinuz ro root=%s%d %s\n" % (disk_target, next_boot+4, kernel_opts)
        if img_initrd:
            ret += "\tinitrd /rbt-initrd.img\n"

    elif( type == 'label_target' ):
        if next_boot == 0:
            exit(1)

        disk_grub = 'hd0'
        disk_target = target

        arch = vstring_to_arch(ver_string)
        ret += vstring_to_title(ver_string)
        ret += lock_str
        ret += "\troot (%s%s)\n" % (disk_grub, ",%d" % next_boot )
        if( arch == 'i386'):
            ret += "\tuppermem 204800\n"
        ret += "\tkernel /vmlinuz ro root=LABEL=ROOT_%d %s\n" % (next_boot, kernel_opts)
        ret += "\tinitrd /rbt-initrd.img\n"

    elif( type == 'label_target_raid' ):
        if( next_boot == 0 or next_boot > 4 ):
            exit(1)

        if( next_boot == 1 ):
            disk_grub = 'hd0'
            disk_part = 1
        elif( next_boot == 2 ):
            disk_grub = 'hd1'
            disk_part = 1
        elif( next_boot == 3 ):
            disk_grub = 'hd0'
            disk_part = 2
        else:
            disk_grub = 'hd1'
            disk_part = 2

        disk_target = target

        arch = vstring_to_arch(ver_string)
        ret += vstring_to_title(ver_string)
        ret += lock_str
        ret += "\troot (%s%s)\n" % (disk_grub, ",%d" % disk_part )
        if( arch == 'i386'):
            ret += "\tuppermem 204800\n"
        ret += "\tkernel /vmlinuz ro root=LABEL=ROOT_%d panic=5 %s\n" % (disk_part, kernel_opts)
        ret += "\tinitrd /rbt-initrd.img\n"

    elif( type[:-1] == 'flash_restore' ):
        rimg = type[-1:]

        ret += vstring_to_title(ver_string, True)
        ret += lock_str
        ret += "\troot (hd0,%s)\n" % rimg
        ret += "\tuppermem 204800\n"
        ret += "\tkernel /linux rw root=/dev/ram%s ramdisk_size=32768 %s\n" % (rimg, kernel_opts)
        ret += "\tinitrd /rootflop.img\n"

    elif( type == 'diagnostics' ):
        #only on dell 860s
        ret += "title Hardware Diagnostics\n"
        ret += lock_str
        ret += "\troot (hd0,0)\n"
        ret += "\tkernel /memdisk\n"
        ret += "\tinitrd /diags860.img\n"

    elif( type == 'chainload' ):
        #note, for all current units, flash is /dev/hda, and hd1 in flash grub context
        disk_grub = "hd1"

        prod = get_prod_from_ver_string(ver_string)

        ret += "title Riverbed %s Software\n" % prod
        ret += lock_str
        ret += "\troot (%s,0)\n" % flash_grub
        ret += "\tmap (%s) (%s)\n" % ( disk_grub, flash_grub )
        ret += "\tchainloader (%s,0)/boot/grub/stage1\n" % disk_grub

    ret += "\n"
    return ret


def accum_grub(list, disk, default_boot, manufacturing=False):
    acc = ''
    ct = 1

    for t, v in list:
        if v == 'unknown version' or \
           v == '':
            continue
        acc += make_title(v, t, disk, default_boot, ct, manufacturing)
        #XXX/this works but is not the right way to do it.
        ct += 1

    return acc


def generate_grub(next_boot):
    have_flash = False
    if not (next_boot == 1 or next_boot == 2 or next_boot == -1):
        print "Please enter an appropriate boot target.\n"
        usage()

    #this should get us the boot device on all current systems,
    #no matter their state.
    disk = popen("mount | grep '/boot ' | awk '{print $1}'").readline()[:-2]

    if system("ls /opt/hal/bin/hal > /dev/null 2>&1") == 0:
        if popen("/opt/hal/bin/hal uses_flash_disk").readline()[:-1] == 'true':
            have_flash = True
            #this is historically true, but might change.
            flash = '/dev/hda'
    else:
        if disk != '/dev/hda':
            if system("sfdisk -s /dev/hda > /dev/null 2>&1 ") == 0:
                have_flash = True

    if system("mount | grep \"%s2 on /boot\" > /dev/null 2>&1 " % disk) == 0:
        booted_img = 1
        other = 6
        oboot = 3
    else:
        booted_img = 2
        other = 5
        oboot = 2

    if next_boot == -1:
        next_boot = booted_img

    mkdir("/tmp/ai/")
    err = system("mount %s%d /tmp/ai/ > /dev/null 2>&1" %
                    (disk, oboot))
    if booted_img == 1:
        img1_initrd = exists('/boot/rbt-initrd.img')
        img2_initrd = exists('/tmp/ai/rbt-initrd.img')
    else:
        img1_initrd = exists('/tmp/ai/rbt-initrd.img')
        img2_initrd = exists('/boot/rbt-initrd.img')
    system("umount %s%d > /dev/null 2>&1" % (disk, oboot))

    system("umount %s%d > /dev/null 2>&1" % (disk, other))
    err = system("mount %s%d /tmp/ai/ > /dev/null 2>&1" %
                    (disk, other))

    if booted_img == 1: 
        img1 = "/etc/build_version.sh"
        img2 = "/tmp/ai/etc/build_version.sh"
    else:
        img1 = "/tmp/ai/etc/build_version.sh"
        img2 = "/etc/build_version.sh"

    try:
        ver_string_d1 = get_ver_string(img1, False)
        ver_string_d2 = get_ver_string(img2, False)
    except Exception, x:
        system("umount /tmp/ai/ > /dev/null 2>&1")
        rmdir("/tmp/ai/")
        print "Error:", x
        exit(1)
        
    if have_flash == True:
        flash = '/dev/hda'
        flash_list = []
        if supports_flash(img1) and \
           supports_flash(img2):
            flash_list.append(('flash_target', ver_string_d1))
            flash_list.append(('flash_target', ver_string_d2))
            mixed = False
        else:
            flash_list.append(('chainload', ver_string_d1))
            mixed = True

        #try and detect restore images & diags.
        #don't need to check for safety 
        if exists("/flash/img1/image.img") :
            flash_list.append(('flash_restore1',
                               get_ver_string("/flash/img1/build_version.sh", False)))
        if exists("/flash/img2/image.img") :
            flash_list.append(('flash_restore2',
                               get_ver_string("/flash/img2/build_version.sh", False)))
        #diagnostics 
        if exists("/flash/cfg/diags860.img") and \
           exists("/flash/cfg/memdisk"):
            flash_list.append(('diagnostics', 'diags'))

        flash_text = accum_grub(flash_list, flash, next_boot, False) 
        write_grub(next_boot, flash_text, flash, len(flash_list), True, mixed) 

    #this stuff never really changes.
    if img1_initrd:
        targ1 = 'label_target'
    else:
        targ1 = 'disk_target'
    if img2_initrd:
        targ2 = 'label_target'
    else:
        targ2 = 'disk_target'

    # if the device is "/dev/mdxx", add two more titles for raid fallback
    if disk.find("md",5,7) != -1:
        disk_list_raid = [ ('label_target_raid', ver_string_d1),
                           ('label_target_raid', ver_string_d1),
                           ('label_target_raid', ver_string_d2),
                           ('label_target_raid', ver_string_d2) ]
        disk_text_raid = accum_grub(disk_list_raid, disk, next_boot, True) 
        write_grub(next_boot, disk_text_raid, disk, 4) 
    else:
        disk_list = [ (targ1, ver_string_d1),
                      (targ2, ver_string_d2) ]

        disk_text = accum_grub(disk_list, disk, next_boot, False)
        write_grub(next_boot, disk_text, disk, 2) 

    system("umount %s%d > /dev/null 2>&1" % (disk, other))
    rmdir("/tmp/ai/")
            
def generate_mfg_grub(disk, next_boot = 1):
    have_flash = False

    #this is simpler.
    if disk != '/dev/hda':
        if exists("/proc/ide/hda/driver") \
               and system("cat /proc/ide/hda/driver | grep -v ide-cdrom") == 0:
            have_flash = True

    ver_string = get_ver_string("/etc/build_version.sh", True)

    if have_flash:
        flash_list = [ ('flash_target', ver_string),
                       ('flash_target', ver_string),
                       ('flash_restore', ver_string),
                       ('flash_restore', ver_string) ]

        flash_text = accum_grub(flash_list, "/dev/hda", next_boot, True) 

        write_grub(next_boot, flash_text, "/dev/hda", 4, True, False, True) 

    # if the device is "/dev/mdxx", add two more titles for raid fallback
    if disk.find("md",5,7) != -1:
        disk_list_raid = [ ('label_target_raid', ver_string),
                           ('label_target_raid', ver_string),
                           ('label_target_raid', ver_string),
                           ('label_target_raid', ver_string) ]
        disk_text_raid = accum_grub(disk_list_raid, disk, next_boot, True) 
        write_grub(next_boot, disk_text_raid, disk, 4, manufacturing = True) 
    else:
        disk_list = [ ('label_target', ver_string),
                      ('label_target', ver_string) ]

        disk_text = accum_grub(disk_list, disk, next_boot, True) 
        write_grub(next_boot, disk_text, disk, 2, manufacturing = True) 





