#!/usr/bin/env python

__doc__ = '''\
This module provides access to the linux ramfs filesystem.
'''

import os.path
import os
import subprocess
import errno

class RamFsCmdException(Exception):
    """!
        General exception returned when RamFs runs mount or unmount
        and that shell call fails.
    """
    def __init__(self,
                 msg):
        self.msg = msg

    def __str__(self):
        return self.msg

class RamFs:
    """!
        Class wrapping the state of a linux ramfs mount.
        Used to see if a ramfs is mounted, mount and unmount it.
        Whenever a mount/unmount shell call fails a RamFsCmdException is
        raised.

        A few notes about ramfs:
        1) as with normal mounts, you can mount the same mount point over
           and over, so we check to see if its mounted before running the mount
           call so we don't stack mount points if we have a bug.
        2) ramfs does not enforce filesystem limits so be VERY careful
           the size parameter is an initial size, it will allocate as much
           RAM as you write to this filesystem, however, so applications need 
           to throttle themselves.
        3) ramfs mounts do not show up in df output
        4) ramfs files are allocated in physical memory pages only.  They can
           not be swapped out, so be very careful with your usage.
        5) ramfs is transient memory, once you unmount it you lose your data.
    """

    def __init__(self,
                 mnt_path):
        """! 
            Initializer
    
            \param mnt_path location of the mount point associated with this
                            ramfs
        """
        self.__mnt_path        = mnt_path

    def is_mounted(self):
        """!
            Returns true if the associated mnt_path is currently a mount point
            
            \return boolean True if the RamFs is mounted, False otherwise
        """
        return os.path.ismount(self.__mnt_path)

    def mount_ramfs(self,
                    size_in_mb):
        """!
            Make any directories necessary for the mount point and then
            mount the ramfs on the associated mount point with the given size.
            Raises an exception if the directory is already mounted.
            
            \param size_in_mb integer initial size of the ramfs in MB
        
            \exception RamFsCmdException on failure of the mount shell 
                                         command
            \exception OSError when the mnt path is already mounted
        """
        if self.is_mounted():
            raise OSError(errno.EEXIST, 
                          "Directory %s is already mounted" % \
                          self.__mnt_path)
                            
        
        mount_ramfs_cmd  = [ "/bin/mount", "ramfs", "-t", "ramfs" ]
        if not os.path.exists(self.__mnt_path):
            # make the mount point
            os.makedirs(self.__mnt_path)

        cmdline_list = mount_ramfs_cmd
        # use MB units on the ramfs mount
        cmdline_list.extend([ "-o", "size=%dm" % size_in_mb ])
        cmdline_list.append(self.__mnt_path)

        pobj = subprocess.Popen(cmdline_list, 
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        ret_code = pobj.wait()
        
        if ret_code != 0:
            raise RamFsCmdException("Failed to mount ramfs on %s with " \
                                    "size %s with error %d" % \
                                    (self.__mnt_path, 
                                     size_in_mb,
                                     ret_code) )

    def unmount_ramfs(self):
        """!
            Unmount the given mount point if it is mounted

            \exception RamFsCmdException on failure of the unmount shell 
                                         command
        """
        unmount_ramfs_cmd = [ "/bin/umount" ]
        cmdline_list = unmount_ramfs_cmd
        cmdline_list.append(self.__mnt_path)

        if not self.is_mounted():
            return

        if os.path.ismount(self.__mnt_path):
            pobj = subprocess.Popen(cmdline_list,
                                    stdout=subprocess.PIPE,
                                    stderr= subprocess.PIPE)
            ret_code = pobj.wait()
        
            if ret_code != 0:
                raise RamFsCmdException("Failed to unmount ramfs on %s " \
                                        "with error %d" % \
                                        (self.__mnt_path,
                                         ret_code) )
