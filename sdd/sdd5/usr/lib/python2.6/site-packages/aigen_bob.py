#!/usr/bin/python

from os.path import exists
from sys import exit
from os import system, popen, rmdir, mkdir, chmod
from aigen_common import *


def write_grub(next_boot, titles, disk, num_titles,
               filename, manufacturing = False):
    txt = """serial --unit=0 --speed=9600 --word=8 --parity=no --stop=1
terminal --timeout=10 --dumb serial console
"""

    # For BOB there is just one grub option
    txt += "default=0\n"
    txt += "timeout=5\n"

    password = check_password()
    if password != "":
        if password.find('$1$') == 0:
            txt += 'password --md5 %s\n\n' % password
        else:
            txt += 'password --encrypted %s\n\n' % password

    txt += titles

    if manufacturing:
        mkdir("/bootmgr")
        if disk.startswith('/dev/flash') or disk.startswith('/dev/disk'):
            system("mount %sp1 /bootmgr > /dev/null 2>&1" % disk)
        else:
            system("mount %s1 /bootmgr > /dev/null 2>&1" % disk)

    try:
        file = open(filename, 'w')
        file.write(txt)
        file.close()
        chmod(filename, 0600)
    except Exception:
        if not manufacturing:
            print_log('warn', 'Unable to write disk grub.')
        else:
            print_log('warn', 'Could not write grub.')

    #cleanup
    if manufacturing:
        while exists("/bootmgr/boot/grub/grub.conf"):
            system("umount /bootmgr > /dev/null 2>&1")
            sleep(.1)
        rmdir("/bootmgr")


def generate_grub(next_boot):
    bootmgr_partno = 1
    root_partno = 3
    bootmgr_mnt_pt = '/alt/mnt/bootmgr'
    root_mnt_pt = '/alt/mnt/root'

    if not (next_boot == 1 or next_boot == 2 or next_boot == -1):
        print_log(warn, "Please enter an appropriate boot target.")
        return 1

    bootmgr_dev = popen("mount | grep '/bootmgr ' | grep -v 'alt' | awk '{print $1}'").readline()[:-1]

    bootmgr_label = popen("e2label %s" % bootmgr_dev).readline()[:-1]

    if bootmgr_label == 'BOOTMGR_1':
        booted_img = 1
        # Other boot disk number
        obootdiskno = 1
    elif bootmgr_label == 'BOOTMGR_2':
        booted_img = 2
        # Other boot disk number
        obootdiskno = 0
    else:
        print_log(warn, "Unknown BOOTMGR partition cannot modify grub")
        return 1

    # In BOB we do not modify the current grub for any reason
    if next_boot == -1 or next_boot == booted_img:
        return 0

    # If we reach here means that the other BOOTMGR partition needs to be updated
    # Get the version string
    img = "%s/etc/build_version.sh" % root_mnt_pt

    try:
        ver_string_d1 = get_ver_string(img, False)
    except Exception, x:
        print_log(warn, "Error getting version string [%s]" % x)
        return 1
        
    # BOB images cannot work without labels.
    disk = '/dev/disk%d' % obootdiskno
    disk_list = [ ('label_target', ver_string_d1, next_boot) ]

    disk_text = accum_grub(disk_list, disk, next_boot)

    write_grub(next_boot, disk_text, disk, 2, '%s/boot/grub/grub.conf' % bootmgr_mnt_pt, False) 

    return 0


## make_title
# @param -> The version string from the build file
# @param -> type "disk_target"|"flash_target"
# @param -> target device eg: /dev/sda
# @param -> the partition number from which we will boot by default
# @param -> the partition number for the other boot partition
# @param -> if the machine is in manufacturing mode or upgrade mode
# Returns the title for a grub option, need to be run for each option
#
def make_title(ver_string, type, target, default_boot, next_boot = 0):
    password = check_password()

    lock_str = ''
    if default_boot != next_boot and password != '':
        lock_str += '\tlock\n'

    hwt_kernel_opts = execute_hwtool_query('kernel-opts')
    console_opts='console=tty0 console=ttyS0,9600n8'
    if hwt_kernel_opts != '':
        kernel_opts = '%s %s' % (hwt_kernel_opts, console_opts)
    else:
        kernel_opts = console_opts

    ret = ''
    if( type == 'label_target' ):
        if next_boot == 0:
            exit(1)

        disk_grub = 'hd0'
        disk_target = target

        arch = vstring_to_arch(ver_string)
        ret += vstring_to_title(ver_string)
        ret += lock_str
        # For BOB boxes, the boot partition is always diskXp2
        # hence we will hard code "root (hdX, 1)" below
        ret += "\troot (%s,1)\n" % disk_grub
        if( arch == 'i386'):
            ret += "\tuppermem 204800\n"
        ret += "\tkernel /vmlinuz ro root=LABEL=ROOT_%d %s\n" % (next_boot, kernel_opts)
        ret += "\tinitrd /rbt-initrd.img\n"

    ret += "\n"
    return ret


def accum_grub(list, disk, default_boot):
    acc = ''

    for t, v, n in list:
        if v == 'unknown version' or \
           v == '':
            continue

        acc += make_title(v, t, disk, default_boot, n)

    return acc


def generate_mfg_grub(disk, next_boot):
    # For BOB boxes there is just a single grub entry
    # so the default boot is always the first entry
    default_boot = 1

    ver_string = get_ver_string("/etc/build_version.sh", True)

    disk_list = [ ('label_target', ver_string, next_boot) ]

    disk_text = accum_grub(disk_list, disk, default_boot) 

    write_grub(next_boot, disk_text, disk, 2, '/bootmgr/boot/grub/grub.conf', manufacturing = True) 


