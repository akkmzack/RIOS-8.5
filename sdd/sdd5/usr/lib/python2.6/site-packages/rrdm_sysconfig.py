#!/usr/bin/env python

from os import remove, popen, stat, path, rename
from os.path import exists
from time import sleep
from rrdm_util import run_shell_cmd, rrdm_error, rlog_debug, rlog_notice
from xml.dom.minidom import parse

###############################################################################
# SystemConfig
#
# The system config maintains the state of raid configuration parameters
# and also the raid membership information (MD uuid).
#
###############################################################################
class SystemConfig:
    rrdm_config_file     = '/config/disk_config.xml'
    rrdm_tmp_config_file = '/config/disk_config.xml.tmp'

    config_file		= ''
    config_tmp_file	= ''

    rebuild_rate    = ''
    auto_rebuild    = ''
    config_valid    = False

    def __init__(self, path = rrdm_config_file):
        # default states

        # maintains a mapping of physical port to serial number 
        self.disk_list   = []

        # maintains a mapping of raid device to array UID.
        self.raid_list   = []

	self.config_file     = '%s' % path
	self.config_tmp_file = '%s.tmp' % path

        try:
            self.read_config(path)
        except (IOError, OSError, rrdm_error):
            rlog_notice ('Unable to read previous RAID Configuration.')
            # XXX . rewrite or restore from backup the old config.
            pass

    def is_config_valid(self):
        return self.config_valid

    def get_rebuild_rate(self):
        return self.rebuild_rate

    def auto_rebuild_enabled(self):
        if self.auto_rebuild.lower() == 'false':
            return False
        else:
            # default is going to be True.
            return True

    def get_array_uid(self, name):
        for array in self.raid_list:
            if array[0] == name:
                return array[1]

        return 'none'

    def get_disk_serial(self, port):
        for disk in self.disk_list:
            if disk[0] == port:
                return disk[1]

        return 'none'

    def get_disk_rport(self, port):
        for disk in self.disk_list:
            if disk[0] == port:
                return disk[2]

        return 'none'

    ###########################################################################
    # display_disk_config
    #
    # print the contents of the disk class in user viewable form.
    #
    # TODO: add fixed column output
    #
    ###########################################################################
    def display_disk_config(self):
	if self.is_config_valid():
	    print 'Rebuild Rate: %s KB/s' % self.rebuild_rate
	    print 'System Disks:' 
	    print '\tDrive\tRPort\tSerial'
	    for disk in self.disk_list:
		print '\t%s\t%s\t%s' % (disk[0], disk[2], disk[1])

	    print 'Raid Arrays:' 
	    print '\tName\tUUID'
	    for array in self.raid_list:
		print '\t%s\t%s' % (array[0], array[1])
	else:
	    print 'Invalid XML in disk config'
	

    ###########################################################################
    # read_config
    #
    # read the raid settings and previous disk/raid configuration from the
    # config file.  The config file is mainly used for a few persistant config
    # settings, and historical information about the system.
    #
    # The raid uid's are used to figure out which arrays can be assembled,
    # and to help make the determination as to whether or not we should 
    # toss the data away and rebuild.
    #
    ###########################################################################
    def read_config(self, path):
        cfile = path

        #
        # if the file isnt there or we can't read it,
        # we just get leave config_valid set to false.
        if exists (cfile):
            dom     = parse(cfile)
            cfg     = dom.getElementsByTagName('config')

            self.rebuild_rate = '%s' % cfg[0].getAttribute('rebuild_rate')
            self.auto_rebuild = '%s' % cfg[0].getAttribute('auto_rebuild')

            drives = dom.getElementsByTagName('drives')[0]
            disks  = drives.getElementsByTagName('disk')
            for disk in disks:
                port=disk.getAttribute('port')
                serial=disk.getAttribute('serial')
		rport=disk.getAttribute('rport')
                self.disk_list.append((port, serial, rport))

            raid_arrays = dom.getElementsByTagName('raid-arrays')[0]
            arrays = raid_arrays.getElementsByTagName('array')
            for array in arrays:
                name = '%s' % array.getAttribute('name')
                uid  = '%s' % array.getAttribute('uid')
                self.raid_list.append((name, uid))

            self.config_valid = True

    ###########################################################################
    # write_config
    #
    # serialize the system object to disk, and update the config structure with
    # the disk/raid information from the system object.
    #
    ###########################################################################
    def write_config(self, system):
        name = self.config_tmp_file
        self.config_valid = False

        try:
            rlog_debug ('Writing disk configuration to : ' + name)
            tfile = open (name, "w+")
            tfile.write('<rrdm version="1">\n')
            tfile.write('<config rebuild_rate=\"%s\" auto_rebuild=\"%s\"/>\n' % \
                        (system.get_rebuild_rate(), "true"))
            tfile.write('<drives>\n')

            self.disk_list = []
            for disk in system.disk_array.get_drive_list():
		# figure out the raid port corresponding to
		# this drive.
		if not disk.is_missing():
		    if disk.has_valid_superblock():
			# read the rport from the SB
			rport = '%s' % disk.superblock.get_raid_port()
		    else:
			# disk is in, but no rport, so we don't know what it
			# is yet, should be the old one.
			rport = self.get_disk_rport(disk.portnum)
			
		else:
		    # disk is missing so, fill in the previous raid port.
		    #
		    rport = self.get_disk_rport(disk.portnum)

                tfile.write ('<disk port=\"%s\" rport=\"%s\" serial=\"%s\"/>\n' % (
                             disk.portnum, rport, disk.serialnum))
                self.disk_list.append ((disk.portnum, disk.serialnum))

            tfile.write('</drives>\n')

            tfile.write('<raid-arrays>\n')
            # reset the array list
            self.array_list = []
            for array in system.raid_arrays.get_array_list():
                tfile.write ('<array name=\"%s\" uid=\"%s\"/>\n' % (
                             array.name, array.uuid))
                self.array_list.append ((array.name, array.uuid))

            tfile.write('</raid-arrays>\n')
            tfile.write('</rrdm>\n')
            tfile.close()
        except IOError:
            raise rrdm_error ('unable to create configuration file %s' % name)

        try:
            rename (name, self.config_file)
        except Exception:
            raise rrdm_error ('unable to update configuration file %s' %
                              self.config_file)

        self.config_valid = True

