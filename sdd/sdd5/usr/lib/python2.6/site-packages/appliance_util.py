from os.path import exists
from os import popen

###############################################################################
# get_appliance_model
#
# Product specific utility to determine what the model/spec of the appliance is
# 
###############################################################################
def get_appliance_model():
    hald_model_path = '/opt/tms/bin/hald_model'

    if not exists (hald_model_path):
        # we can't get the model.
        return None

    # grab the model from hald_model
    pf = popen (hald_model_path)
    model_line  = pf.read().strip()
    rcode = pf.close()

    try:
        model = model_line.split("\t")[0]
    except IndexError:
        # if we can't find the model, we'll return None and expect the caller
        # to handle this case
        return None

    return model

###############################################################################
# get_appliance_base_mem
#
# Product specific utility to determine the base memory
# 
###############################################################################

def get_appliance_base_memory():
    hald_model_path = '/opt/tms/bin/hald_model'

    if not exists (hald_model_path):
        # we can't get the model.
        return None

    # grab the model from hald_model
    pf = popen (hald_model_path)
    base_mem_line  = pf.read().strip()
    rcode = pf.close()

    try:
        base_mem = base_mem_line.split("\t")[34]
    except IndexError:
        # if we can't find the model, we'll return None and expect the caller
        # to handle this case
        return None

    return base_mem

###############################################################################
# get_appliance_uses_granite
#
# Product specific utility to determine if the model/spec has granite/edge enabled
# 
###############################################################################

def get_appliance_uses_granite():
    hald_model_path = '/opt/tms/bin/hald_model'

    if not exists (hald_model_path):
        # we can't get the model.
        return None

    # grab the model from hald_model
    pf = popen (hald_model_path)
    granite_line  = pf.read().strip()
    rcode = pf.close()

    try:
        granite = granite_line.split("\t")[70]
    except IndexError:
        # if we can't find the model, we'll return None and expect the caller
        # to handle this case
        return None

    return granite

###############################################################################
# get_onboard_nic_pattern_name 
#
# for VSH we need a product specific graft point to differentiate two
# forms of the same virtual motherboard. SMCVE/CMCVE both us pcnet32
# for pri/aux which present themselves in an incompatible way with
# vmxnet3 for pri/aux
#
# This product specific graft point for hwtool is used to select an
# an appropriate onboard pattern based on the appliance type.
#
###############################################################################
def get_onboard_nic_pattern_name():
    return "vmxnet3"

