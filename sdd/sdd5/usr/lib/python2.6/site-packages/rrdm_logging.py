#!/usr/bin/env python
#
###############################################################################
#
# Logging Wrapper for the raid tools
# 
# allows a software independant class for managing raid logging.
# since 5.0 has tms logging, but 4.0 doesnt and we want to maintain
# consistency across the images, I added a simple library for 
# hiding logging details from rrdm_util
#
# Log messages will have slightly different formats across builds. XXX 
# standardize the log formats.
#
###############################################################################

from os.path import exists

use_tms_logger = False
use_py_logger = False

try:
    from Logging import *
    from Logging import log_init
    use_tms_logger=True
except ImportError:
    try:
        import logging, logging.handlers
        use_py_logger = True
    except ImportError:
        # null logger would be used.
        pass

if not exists ('/var/log/messages'):
    # if for some reason /var isnt there, we want to not try to log to it.
    # this happens when /var recovery is happening and the tools attempt 
    # to log to syslog that isnt there, tms logging seems to handle this 
    # better than the py logger.
    use_py_logger = False

###############################################################################
# PyLogger - Logging class wrapping the standard python logger
#
###############################################################################
class PyLogger:
    def __init__(self, name):
        self.logger = logging.getLogger(name)
        hdlr = logging.handlers.SysLogHandler("/dev/log")
        formatter = logging.Formatter(' %(name)s: %(levelname)s: %(message)s')
        hdlr.setFormatter(formatter)
        self.logger.addHandler(hdlr)
        self.logger.setLevel(logging.DEBUG)
        logging.addLevelName(29, "NOTICE")

    def notice (self, msg):
        self.logger.log(29, msg)

    def debug(self, msg):
        self.logger.debug (msg)

    def info (self, msg):
        self.logger.info (msg)

    def error(self, msg):
        self.logger.error (msg)

    def warn (self, msg):
        self.logger.warn (msg)

###############################################################################
# TmsLogger - Logging class wrapping the Riverbed TMS logger
#
###############################################################################
class TmsLogger:
    def __init__(self, name):
        log_init (name, name, LCO_none, component_id (LCI_SWRAID),
                  LOG_DEBUG, LOG_LOCAL0, LCT_SYSLOG)

    def debug(self, msg):
        log (LOG_DEBUG, msg)

    def info (self, msg):
        log (LOG_INFO, msg)

    def error(self, msg):
        log (LOG_ERR, msg)

    def warn (self, msg):
        log (LOG_WARNING, msg)
    
    def notice (self, msg):
        log (LOG_NOTICE, msg)

###############################################################################
# NullLogger - Logging class wrapping the Null logger
#
###############################################################################
class NullLogger:
    def __init__(self, name):
        pass

    def debug(self, msg):
        pass

    def info (self, msg):
        pass

    def error(self, msg):
        pass

    def warn (self, msg):
        pass

    def notice (self, msg):
        pass

Logger = NullLogger("")

def init_logging (name):
    global Logger, use_tms_logger, use_py_logger

    if use_tms_logger:
        Logger = TmsLogger(name)
    elif use_py_logger:
        Logger = PyLogger(name)

def debug(msg):
    global Logger
    Logger.debug(msg)

def error(msg):
    global Logger
    Logger.error(msg)

def info(msg):
    global Logger
    Logger.info(msg)

def warn(msg):
    global Logger
    Logger.warn(msg)

def notice(msg):
    global Logger
    Logger.notice(msg)

