#! /bin/bash
#
# mdinit          Apply initial configuration to the system
#
# chkconfig: 2345 15 80
# description: apply initial configuration to the system

# Source function library.
. /etc/init.d/functions

if [ -r /opt/tms/release/build_version.sh ] ; then
   . /opt/tms/release/build_version.sh
fi

ATTEMPTING_FALLBACK_FILE=/var/opt/tms/.attempting_fallback_reboot

RETVAL=0

switch_bob_partition()
{
	BOOT_INFO=`/opt/tms/bin/launch_esxi_ssh.py ". /etc/profile; /sbin/aigen.py -D | /bin/grep \"altbootbank/bank\""`
	AIG_FALLBACK_BOOT_ID=`echo ${BOOT_INFO} | /bin/awk -F '=' '{print $2}'`
	/opt/tms/bin/launch_esxi_ssh.py ". /etc/profile; /sbin/aigen.py -s ${AIG_FALLBACK_BOOT_ID}"
}

start() {
        MOBO=`/opt/hal/bin/hwtool.py -q motherboard`

        # make sure mfdb is world-readable so RBM users logging into the
        # CLI can get the variant information.  This check is needed for the
        # upgrade case.
        MFDB_PATH=/config/mfg/mfdb
        if [ -f ${MFDB_PATH} ]; then
            chmod a+r ${MFDB_PATH}
        fi

        echo $"Running system image: ${BUILD_PROD_VERSION}"

        # maybe run product-specific checks to make sure we support
        # this upgrade path
	if [ -f /bin/product_image_check.sh ]; then
	    /bin/product_image_check.sh
	    if [ $? -ne 0 ]; then
	        eval `/sbin/aiget.sh`

                PREVIOUS_RIOS_VERSION=`/sbin/imgq.sh -i -d -l ${AIG_FALLBACK_BOOT_ID} | grep "BUILD_PROD_RELEASE" | gawk -F = '{ print $2 }' | tr -d \"`
                CURRENT_RIOS_VERSION=`/sbin/imgq.sh -i -d -l ${AIG_THIS_BOOT_ID} | grep "BUILD_PROD_RELEASE" | gawk -F = '{ print $2 }' | tr -d \"`

                logger "ERROR - Upgrading from ${PREVIOUS_RIOS_VERSION} to ${CURRENT_RIOS_VERSION} is unsupported.  For more upgrade information, see the Software Upgrade tool for Steelhead appliances and the knowledge base article \"Upgrade and downgrade restrictions for RiOS 6.5 and later\" on the Riverbed Support site.  For further assistance with upgrading and downgrading, please contact Riverbed Support."

		logger $"Forcing reboot from fallback image ${AIG_FALLBACK_BOOT_ID}"
		/sbin/aigen.py -i -l ${AIG_FALLBACK_BOOT_ID}

		touch ${ATTEMPTING_FALLBACK_FILE}

		umount -a
		mount -n -o remount,ro /
		reboot -f
 	     fi
	fi

	# monitor shadow device...
	[ -b /dev/sha ] && [ -x /sbin/shadow_setup.sh ] && \
        	/sbin/shadow_setup.sh -m sha

        # The db will not have the IPv6 node on the first boot into a version
        # that supports IPv6, but that's okay, because mddbreq returns the
        # empty string for non-existent nodes and IPv6 is off by default

        if [ -f "/config/db/active" ]; then
            IPV6_ENABLE=$(/opt/tms/bin/mddbreq -v `cat /config/db/active` query get - /net/config/ipv6/enable)
        fi

        if [ "x${IPV6_ENABLE}" = "xtrue" ]; then
            modprobe ipv6

            #Disable sysctl entries before bringing interfaces up to avoid sending out IPv6 packets
            pdir="/proc/sys/net/ipv6/conf/"
            ints=`ls $pdir`

            for int in ${ints}; do
                echo 0 > ${pdir}/${int}/autoconf
                echo 0 > ${pdir}/${int}/accept_ra
                echo 0 > ${pdir}/${int}/router_solicitations
                echo 0 > ${pdir}/${int}/dad_transmits
            done

        fi

	echo -n $"Applying configuration: "
	/opt/tms/bin/mgmtd -o -w
	RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "failed."

            # The initial commit failed, which is bad news.  We'll switch to
            # reboot from the fallback image, unless we are the fallback
            # image, or have already tried to do this.

            eval `/sbin/aiget.sh`

            if [ ! -z "${AIG_THIS_BOOT_ID}" -a ! -z "${AIG_FALLBACK_BOOT_ID}" ]; then
                if [ ! -f ${ATTEMPTING_FALLBACK_FILE} ]; then
                    if [ "${AIG_THIS_BOOT_ID}" -ne "${AIG_FALLBACK_BOOT_ID}" ]; then
                        echo $"Forcing reboot from fallback image ${AIG_FALLBACK_BOOT_ID}"
			if [ "x${MOBO}" = "xBOB-MOBO" ]; then
				switch_bob_partition
			else
                        	/sbin/aigen.py -i -l ${AIG_FALLBACK_BOOT_ID}
			fi

                        touch ${ATTEMPTING_FALLBACK_FILE}

                        umount -a
                        mount -n -o remount,ro /
                        telinit 6
			exit 0
                    fi
                fi
            fi


            # If we are the fallback image, we'll just have to go with an
            # initial config file.

            echo -n $"Forcing initial configuration: "
            /opt/tms/bin/mgmtd -o -f -w
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "failed."
                return $RETVAL
            fi
        fi

        #flush current ipv6 addr in rios_wan/rios_lan/prihw/priwan/prilan interfaces
        /sbin/ip -6 addr flush label "rios_[w|l]an*"
        /sbin/ip -6 addr flush label "pri[w|l]an"
        /sbin/ip -6 addr flush label "prihw"

        # append to image history
        if [ -f /var/opt/tms/image_history ]; then
            SEEN_BEFORE=0
            SAME_VERSION=0

            grep "${BUILD_PROD_VERSION}" /var/opt/tms/image_history > /dev/null
            if [ $? = 0 ]; then
                SEEN_BEFORE=1
            fi
            tail -1 /var/opt/tms/image_history | grep "${BUILD_PROD_VERSION}" > /dev/null
            if [ $? = 0 ]; then
                SAME_VERSION=1
            fi

            if [ $SAME_VERSION = 0 ]; then
                if [ $SEEN_BEFORE = 0 ]; then
                    echo "Upgraded to ${BUILD_PROD_VERSION} on `date`" >> /var/opt/tms/image_history
                else
                    echo "Reverted to ${BUILD_PROD_VERSION} on `date`" >> /var/opt/tms/image_history
                fi
            fi
        else
            echo "Firstboot to ${BUILD_PROD_VERSION} on `date`" >> /var/opt/tms/image_history
        fi


        # Clear state about any forced fallback reboot, as the commit was good
        rm -f ${ATTEMPTING_FALLBACK_FILE}
	echo

        # See if we have a db from manufacturing to include
        if [ -f /config/mfg/mfincdb ]; then
            echo -n $"Applying manufacturing configuration: "
            /opt/tms/bin/mddbreq -d /config/mfg/mfincdb \
		`cat /config/db/active` set modify -
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "failed."
                return $RETVAL
            fi
	    # Save to /config/local/db as well as active db
	    # in case a quick reload is done as in bug 89321
            /opt/tms/bin/mddbreq -d /config/mfg/mfincdb \
		/config/local/db set modify -
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "failed."
                return $RETVAL
            fi
            mv /config/mfg/mfincdb /config/mfg/mfincdb-prev
        fi
        echo
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/mdinit
	return $RETVAL
}

stop() {
        # shutdown shadow device...
	[ -b /dev/sha ] && [ -x /sbin/shadow_setup.sh ] && \
		/sbin/shadow_setup.sh -h sha
	rm -f /var/lock/subsys/mdinit
	RETVAL=$?
	return $RETVAL
}	

restart() {
  	stop
	start
}	

reload() {
	start
}	

case "$1" in
  start)
  	start
	;;
  stop)
  	stop
	;;
  restart)
	stop
	start
	;;
  reload)
  	reload
	;;
  status)
	;;
  *)
	echo $"Usage: $0 {start|stop|status|reload|restart}"
	exit 1
esac

exit $?
