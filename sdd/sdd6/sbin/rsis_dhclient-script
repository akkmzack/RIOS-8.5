#!/bin/bash

#
#  Filename:  $Source$
#  Revision:  $Revision: 69323 $
#  Date:      $Date: 2010-08-26 22:36:37 -0700 (Thu, 26 Aug 2010) $
#  Author:    $Author: potoole $
#

function make_resolv_conf() {
    return
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
function exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

if [ x$reason = xMEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then

  # We need to give the kernel some time to get the interface up.
  sleep 1

  exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
  exit_with_hooks 0
fi

if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then

  if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
     [ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

# XXX: do we need to do anything with $new_broadcast_address?
# Can't the broadcast address always be inferred from the subnet mask?

    ifconfig $interface inet $new_ip_address $new_subnet_arg $new_broadcast_arg
    if [ -n "$new_interface_mtu" ]; then
        /sbin/ip link set $interface mtu $new_interface_mtu;
    fi;

    # Add a network route to the computed network address.
    for router in $new_routers; do
        /sbin/ip route replace default via $router dev $interface;
    done

  fi

  if [ "${PEERDNS}" != "no" ]; then
    make_resolv_conf
  fi
  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then

  exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then

  set $new_routers
  if ping -q -c 1 -w 10 $1; then

    if [ "${PEERDNS}" != "no" ]; then
      make_resolv_conf
    fi
    exit_with_hooks 0
  fi

  exit_with_hooks 1
fi

exit_with_hooks 0
